{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.woff2","path":"fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/js/gitalk.min.js","path":"js/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/js/jquery.fancybox.min.js","path":"js/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/images/icp.png","path":"images/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-v4compatibility.ttf","path":"webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-v4compatibility.woff2","path":"webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/style/animate.min.css","path":"style/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/style/gitalk.css","path":"style/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/style/jquery.fancybox.min.css","path":"style/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/style/main.styl","path":"style/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minimalism/source/style/prism.css","path":"style/prism.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1680677789600},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1680677788250},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1680677789538},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1680677788320},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1680677789603},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1680677790183},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1680677789593},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1680677790186},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1680677790190},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1680677790191},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1680677790193},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1680677790195},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1680677790197},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1680677790198},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1680677790199},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1680677790200},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1680677790201},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1680677790185},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1680677790203},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1680677788419},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1680677788434},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1680677788461},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1680677788466},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1680677788475},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1680677788484},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1680677788505},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1680677789532},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1680677788387},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1680677788400},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1680677788395},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1680677788441},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1680677788422},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1680677788450},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1680677788455},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1680677788452},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1680677788468},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1680677788457},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1680677788492},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1680677788408},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1680677788432},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1680677788488},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1680677788503},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1680677788508},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1680677789635},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1680677789636},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1680677789667},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1680677788898},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1680677788566},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1680677789571},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1680677789566},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1680677788367},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1680677789624},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1680677789576},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1680677788426},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1680677788444},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1680677788438},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1680677788500},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1680677788510},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1680677788472},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1680677789642},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1680677789638},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1680677789644},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1680677789640},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1680677789649},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1680677789652},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1680677789656},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1680677789658},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1680677789663},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1680677789665},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1680677789648},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1680677789654},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1680677789615},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1680677788553},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1680677790174},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1680677789626},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1680677789619},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1680677788346},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1680677789553},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1680677789557},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1680677788352},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1680677789560},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1680677789632},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1680677790130},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1680677788564},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1680677790123},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1680677789520},{"_id":"public/2023/04/05/hello-world/index.html","hash":"74e752c5e0f680237b301f6945821abcaeb45599","modified":1681233445794},{"_id":"public/archives/index.html","hash":"0daeb28f5065bebe26c58eb5a9ed39cab9622d07","modified":1681728348331},{"_id":"public/archives/2023/index.html","hash":"0daeb28f5065bebe26c58eb5a9ed39cab9622d07","modified":1681728348331},{"_id":"public/archives/2023/04/index.html","hash":"0daeb28f5065bebe26c58eb5a9ed39cab9622d07","modified":1681728348331},{"_id":"public/index.html","hash":"0333bddb2f47666b059fe8997cad9a972b584970","modified":1681728348331},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1680678016177},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1680678016177},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1680678016177},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1680678016177},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1680678016177},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1680678016177},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1680678016177},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1680678016177},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1680678016177},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1680678016177},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1680678016177},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1680678016177},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1680678016177},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1680678016177},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1680678016177},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1680678016177},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1680678016177},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1680678016177},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1680678016177},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1680678016177},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1680678016177},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1680678016177},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1680678016177},{"_id":"source/tags/index.md","hash":"a15d834e5ad024cc36ba0fdcdea800054b3ec116","modified":1680681261518},{"_id":"source/categories/index.md","hash":"13055aca38bae96e28a57d465c91e21183096e64","modified":1680681307250},{"_id":"source/about/index.md","hash":"55bd3f3c91b722633115c99c5ab8d8282fd2d9ec","modified":1680681274154},{"_id":"themes/hexo-theme-minimalism/.editorconfig","hash":"dff6b0a9670162c0d34e9a7e470e400e0ed66226","modified":1680680606939},{"_id":"themes/hexo-theme-minimalism/.eslintrc.json","hash":"c6818497de36c6424ef080779a0b2f9a07d2214c","modified":1680680606940},{"_id":"themes/hexo-theme-minimalism/.gitignore","hash":"fee41f2708b83640346e9b8eb43aa4eea334e5dd","modified":1680680606944},{"_id":"themes/hexo-theme-minimalism/.eslintignore","hash":"6b9578b9b9f1500a77b9f9b8911fafb71f5290d5","modified":1680680606940},{"_id":"themes/hexo-theme-minimalism/LICENSE","hash":"7e6f53432e8ea8b96f70307812853191b8728559","modified":1680680606944},{"_id":"themes/hexo-theme-minimalism/TODO.md","hash":"89aed71067db36bb5bf9e6728e8d82cf1d2276d0","modified":1680680606945},{"_id":"themes/hexo-theme-minimalism/_config.yml","hash":"2ca04d1aaf022201ba0ea33887165089375d150a","modified":1681233881938},{"_id":"themes/hexo-theme-minimalism/README.md","hash":"5e2943451ae6cdbc4afdf40dafc4ada6c2ec16e5","modified":1680680606945},{"_id":"themes/hexo-theme-minimalism/package.json","hash":"e745f2cd3cc6fd508946b44132074559fe7d945d","modified":1680680606951},{"_id":"themes/hexo-theme-minimalism/scripts/export-config.js","hash":"21ccfe9df24675fb5e33bb0f1359a0d3bbc48446","modified":1680680606952},{"_id":"themes/hexo-theme-minimalism/layout/archive.ejs","hash":"4e0cee1da64efb3e475779221f5bf5fc7b6f8829","modified":1680680606946},{"_id":"themes/hexo-theme-minimalism/layout/categories.ejs","hash":"68a741a4c89e27b5fcde467881ab6687629c58fb","modified":1680680606947},{"_id":"themes/hexo-theme-minimalism/layout/index.ejs","hash":"9e35876afb17910cb3d86e7279e7585e2e99fa0f","modified":1680680606950},{"_id":"themes/hexo-theme-minimalism/scripts/filters/fancybox-handle.js","hash":"a2852887de244d8bfc7fd8e41a9fd5468dee31ef","modified":1680680606953},{"_id":"themes/hexo-theme-minimalism/layout/post.ejs","hash":"ebc1d5427ec31439eef97c8796ee21e5dbec3d98","modified":1680680606950},{"_id":"themes/hexo-theme-minimalism/layout/tags.ejs","hash":"73cf2c615cd505bb57a028b9d59cf94a7629e4bb","modified":1680680606951},{"_id":"themes/hexo-theme-minimalism/layout/tag.ejs","hash":"ff2865eceffee3cff8093db8064cb392ddad310c","modified":1680680606951},{"_id":"themes/hexo-theme-minimalism/scripts/filters/footnotes.js","hash":"9ee3401824a7779886a1bffd6d48808331b2b945","modified":1680680606953},{"_id":"themes/hexo-theme-minimalism/scripts/filters/post-hide.js","hash":"6abbb3f833e2492f535f30e065ee6d0017ae5938","modified":1680680606954},{"_id":"themes/hexo-theme-minimalism/.github/ISSUE_TEMPLATE/bug-report--english-version-.md","hash":"de7fb9397afb2668255ad2ddaed0964d77db1931","modified":1680680606941},{"_id":"themes/hexo-theme-minimalism/.github/ISSUE_TEMPLATE/feature-request--english-version-.md","hash":"012ea4aa465ac7de91eb6704b318293e0e3bf9e3","modified":1680680606942},{"_id":"themes/hexo-theme-minimalism/.github/ISSUE_TEMPLATE/bug-提交--中文版本-.md","hash":"cf9bfbafb13947e766b8b7a48c767e6e9f480a73","modified":1680680606941},{"_id":"themes/hexo-theme-minimalism/.github/ISSUE_TEMPLATE/功能建议--中文版本-.md","hash":"0afbdbe38f0e3e1ed6dad6b08ab12fcc3c3d5a48","modified":1680680606942},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.eot","hash":"c0512c77635d7aed742c66db9a2d4a5eabf31d28","modified":1680680606955},{"_id":"themes/hexo-theme-minimalism/.github/workflows/test.yml","hash":"0f1b7aa8e8b3a86edd58dbea5235d786184db9e9","modified":1680680606943},{"_id":"themes/hexo-theme-minimalism/.github/workflows/lint.yml","hash":"9e9bab3cfb68d97828ce598bd580aea85885fb9e","modified":1680680606943},{"_id":"themes/hexo-theme-minimalism/.github/workflows/npm-publish.yml","hash":"630582876753d2177cbfaa8e69b14d4848e0ad32","modified":1680680606943},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.woff","hash":"e782687d9d37d2e64698256fc0661ac89da6cf43","modified":1680680606956},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.ttf","hash":"4e47e111226a88862a4f93a81d796f83c5728ed8","modified":1680680606955},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.svg","hash":"6dced7bb57c171ebd37381bda836fb875dcfbdfe","modified":1680680606955},{"_id":"themes/hexo-theme-minimalism/source/images/avatar.png","hash":"64c08e2325482e71fcc030351e36610c1d53ff0d","modified":1680680606956},{"_id":"themes/hexo-theme-minimalism/source/images/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1680680606957},{"_id":"themes/hexo-theme-minimalism/source/js/main.js","hash":"9631581bff6569dde4a8ad65a09f298619d917ee","modified":1680680606966},{"_id":"themes/hexo-theme-minimalism/source/fonts/iconfont.woff2","hash":"883d0994ba8e765b7d3da0db7b23c200304f0431","modified":1680680606956},{"_id":"themes/hexo-theme-minimalism/source/images/loading.svg","hash":"f8c017c0d27dea561839d57a7a0cba35489fe434","modified":1680680606957},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-regular-400.woff2","hash":"379ca48f70f3d4f79f8bf1079881c7c5af4f44a4","modified":1680680606977},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-v4compatibility.ttf","hash":"e688e02012b9e5269a09809b0d666edc87527cb2","modified":1680680606978},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-regular-400.ttf","hash":"a14023c43173628d93858c0f3fc90cf54b18a28e","modified":1680680606976},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-v4compatibility.woff2","hash":"951ded71094a52e249ac52799fac7cbb68368270","modified":1680680606979},{"_id":"themes/hexo-theme-minimalism/source/style/gitalk.css","hash":"d2367ccb76a5f69ee7625915e961d33886e8bae7","modified":1680680606973},{"_id":"themes/hexo-theme-minimalism/source/style/prism.css","hash":"decb6841fd414754c26d8291c1a6d036fc37bca3","modified":1681726424326},{"_id":"themes/hexo-theme-minimalism/source/style/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1680680606973},{"_id":"themes/hexo-theme-minimalism/source/style/main.styl","hash":"4daa496cf6a3ddf069d3506c0f24f73b2bd8f078","modified":1680680606973},{"_id":"themes/hexo-theme-minimalism/layout/includes/footer.ejs","hash":"ab8ad1e06e4492389b6082f2ebb1d59bb9879ed8","modified":1680680606947},{"_id":"themes/hexo-theme-minimalism/layout/includes/header.ejs","hash":"60bb1f77012a58bcd369977c1e91b2420407751c","modified":1680680606948},{"_id":"themes/hexo-theme-minimalism/layout/includes/head.ejs","hash":"b70b3fdc1bfedfbde07818646540f42c3624f9c0","modified":1680680606947},{"_id":"themes/hexo-theme-minimalism/layout/includes/navigation_bar.ejs","hash":"598da9e3f24ade743be50cba29479cede3a7ae2c","modified":1680680606948},{"_id":"themes/hexo-theme-minimalism/layout/includes/post-list-category.ejs","hash":"808d7c2d50afc6a31cf24d64006bb881b2632358","modified":1680680606949},{"_id":"themes/hexo-theme-minimalism/layout/includes/post-list-archives.ejs","hash":"c999197db23139e023b6b5e64ead719453cbc214","modified":1680680606949},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/figure.styl","hash":"3d13338bb5003e1cd32b301be4db1e96d8c6f6d0","modified":1680680606967},{"_id":"themes/hexo-theme-minimalism/layout/includes/post-list.ejs","hash":"d2447a75e828d4ff6e8337501fcb76b9f402296f","modified":1680680606949},{"_id":"themes/hexo-theme-minimalism/layout/includes/scripts.ejs","hash":"b3c846bce81cbe0f839eeb567917425705866977","modified":1680680606950},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/archives.styl","hash":"a38505bbf57138ec9f470213646f6904d9964dd6","modified":1680680606966},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/fonts.styl","hash":"2857e38c3c5b290dbf9f0b1dfee23ba825c20729","modified":1680680606967},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/header.styl","hash":"2b8c779a15c961cc18911e512fc3f6f7ee5763f3","modified":1680680606968},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/footer.styl","hash":"9ebfe4914c7078b0740cb62ed9abac6ad20a6cee","modified":1680680606967},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/link.styl","hash":"e1d1f54a6007b34b76aa19df6c9a3b5bf38d4502","modified":1680680606968},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/list.styl","hash":"3595b6130b9da96eb1aab377ce55533b6054d879","modified":1680680606968},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/tag.styl","hash":"b623b08e8d634d93480166e3585cc50061d68129","modified":1680680606969},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/post.styl","hash":"90c438be9c9bdfa0402743a7b122d6a224bc445c","modified":1680680606969},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/pagination.styl","hash":"77d0fd807178dffb8ffa31d244f5ba7ac6c6e508","modified":1680680606969},{"_id":"themes/hexo-theme-minimalism/source/style/_core/colors.styl","hash":"a7f3dcbd0677dc82778f6bc8f0f1490f5cdc4c79","modified":1680680606970},{"_id":"themes/hexo-theme-minimalism/source/style/_core/footnotes.styl","hash":"ada3d7eb6469ea0bf594312ea7dbe341aee9794c","modified":1680680606971},{"_id":"themes/hexo-theme-minimalism/source/style/_core/base.styl","hash":"0225dfc330b728b8c8ffd7fd8e1895bb20e744e1","modified":1680680606970},{"_id":"themes/hexo-theme-minimalism/source/style/_blocks/tags.styl","hash":"d45c190b0a99f7de5b19e379622a8b8cfd812fc1","modified":1680680606970},{"_id":"themes/hexo-theme-minimalism/source/style/_core/hljs.styl","hash":"9752ac2a6cdff29fcb429bf22c378e75405ff20c","modified":1680680606971},{"_id":"themes/hexo-theme-minimalism/source/style/_core/night-node.styl","hash":"02fb68b37d9b0c21f284a8bd04928f0593f7d1aa","modified":1680680606971},{"_id":"themes/hexo-theme-minimalism/source/js/jquery.fancybox.min.js","hash":"03d0936ae9a2b65039970f2a28a9b05f1d0cd993","modified":1680680606964},{"_id":"themes/hexo-theme-minimalism/source/js/jquery.min.js","hash":"f227d0414158da8bd3df7005c8fb56751927453e","modified":1680680606965},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-brands-400.woff2","hash":"a280ecdddd14695fad22599301ab03adfe5224c0","modified":1680680606975},{"_id":"themes/hexo-theme-minimalism/source/style/animate.min.css","hash":"630ae6b73fe5cd5a86944a150e1f66fa6ab7e901","modified":1680680606972},{"_id":"themes/hexo-theme-minimalism/source/webfonts/fa-solid-900.woff2","hash":"2717f3f58271f2f2e6120d9937c7227002656d34","modified":1680680606978},{"_id":"themes/hexo-theme-minimalism/source/js/gitalk.min.js","hash":"1ad14e7b8554c851a89b30f4b4591707d5b355df","modified":1680680606963},{"_id":"source/_posts/yuque/这是我的一个样式文件.md","hash":"680b172d357e20299674b701dbdd973515a2ef2a","modified":1681055188651},{"_id":"source/_posts/yuque/23-课程讲义.md","hash":"f6f1ece8fd20c098f99fb93aef543b0a8b293090","modified":1681056088842},{"_id":"public/categories/index.html","hash":"bbaa450b6a1e18a4c441bb9dc315ad2d2ef088e3","modified":1681728348331},{"_id":"public/tags/index.html","hash":"70c565c1a52574a904953448a0c78c34db8e124b","modified":1681233445794},{"_id":"public/about/index.html","hash":"3eb47b4569905a31eb8a3a322e9a84ea2c2c870d","modified":1681233445794},{"_id":"public/2023/04/09/yuque/23-ke-cheng-jiang-yi/index.html","hash":"ad9b44c6d2c6eda594f879f329c9d733047327da","modified":1681233445794},{"_id":"public/2023/04/09/yuque/zhe-shi-wo-de-yi-ge-yang-shi-wen-jian/index.html","hash":"290a2b809d1c31851ce49b0676353e8762b5cdac","modified":1681728348331},{"_id":"public/categories/algorithm/index.html","hash":"a2977ec6f8120b8764e24ba79431b378ef79804f","modified":1681233445794},{"_id":"public/categories/frontend/index.html","hash":"2db94ac39ce87f0692416775629b9822094e6db8","modified":1681233445794},{"_id":"public/tags/node/index.html","hash":"c4e2b4dc23570af855b45c662da3a78ccebf0c35","modified":1681233445794},{"_id":"public/tags/博客/index.html","hash":"510a7f04cf1d2894f9131c8d417ba77b922235a8","modified":1681233445794},{"_id":"public/tags/讲义/index.html","hash":"dc486885d893b74ed41a46b2859ca7284a668b7b","modified":1681233445794},{"_id":"public/tags/课程/index.html","hash":"e44f96875fe20c2a271b9742d0dfeca220140874","modified":1681233445794},{"_id":"public/fonts/iconfont.svg","hash":"6dced7bb57c171ebd37381bda836fb875dcfbdfe","modified":1681233445794},{"_id":"public/fonts/iconfont.eot","hash":"c0512c77635d7aed742c66db9a2d4a5eabf31d28","modified":1681233445794},{"_id":"public/fonts/iconfont.woff","hash":"e782687d9d37d2e64698256fc0661ac89da6cf43","modified":1681233445794},{"_id":"public/fonts/iconfont.ttf","hash":"4e47e111226a88862a4f93a81d796f83c5728ed8","modified":1681233445794},{"_id":"public/images/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1681233445794},{"_id":"public/images/avatar.png","hash":"64c08e2325482e71fcc030351e36610c1d53ff0d","modified":1681233445794},{"_id":"public/fonts/iconfont.woff2","hash":"883d0994ba8e765b7d3da0db7b23c200304f0431","modified":1681233445794},{"_id":"public/images/loading.svg","hash":"f8c017c0d27dea561839d57a7a0cba35489fe434","modified":1681233445794},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"a14023c43173628d93858c0f3fc90cf54b18a28e","modified":1681233445794},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"379ca48f70f3d4f79f8bf1079881c7c5af4f44a4","modified":1681233445794},{"_id":"public/webfonts/fa-v4compatibility.woff2","hash":"951ded71094a52e249ac52799fac7cbb68368270","modified":1681233445794},{"_id":"public/webfonts/fa-v4compatibility.ttf","hash":"e688e02012b9e5269a09809b0d666edc87527cb2","modified":1681233445794},{"_id":"public/js/main.js","hash":"213652f806a681f52437d442acad95a52354780a","modified":1681233445794},{"_id":"public/style/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1681233445794},{"_id":"public/style/prism.css","hash":"06e7de2a6e7137ab7be92eb6a1af3cb86e2e7dfa","modified":1681233445794},{"_id":"public/js/jquery.min.js","hash":"5c5fc7a069b586d97e5ec53049ddfa5a4ef90b36","modified":1681233445794},{"_id":"public/js/jquery.fancybox.min.js","hash":"2bdabe920a06f15478524b68a9223effd7f37bdd","modified":1681233445794},{"_id":"public/style/main.css","hash":"2f6a67c6c0fb4b2747190f267950e49588231031","modified":1681233445794},{"_id":"public/style/gitalk.css","hash":"5651feb070f12a5733e82d4c0ab5596ee926c74e","modified":1681233445794},{"_id":"public/style/animate.min.css","hash":"162ccb22979eed077317c028e313079afb872551","modified":1681233445794},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"a280ecdddd14695fad22599301ab03adfe5224c0","modified":1681233445794},{"_id":"public/js/gitalk.min.js","hash":"587aec2032011c1ccbf5033a05971a1c19678f49","modified":1681233445794},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"2717f3f58271f2f2e6120d9937c7227002656d34","modified":1681233445794},{"_id":"source/_posts/yuque/树形dp的一些经典例题.md","hash":"e761a1d299ee8f37f13ec064a89290ffbb6ad6a0","modified":1681728412098},{"_id":"source/_posts/yuque/我的博客.md","hash":"54d01434dbf7bd7200d17f39f2054354cdf8c902","modified":1681728917883},{"_id":"source/_posts/yuque/树形背包的经典例题.md","hash":"40be5aaef02894fc6e142cf1663d6e361cb604cf","modified":1681730722481},{"_id":"public/2023/04/09/yuque/wo-de-bo-ke/index.html","hash":"9a5a83be91dba3cc7253daa0276460666c86f9b6","modified":1681728348331},{"_id":"public/2023/04/09/yuque/shu-xing-dp-de-yi-xie-jing-dian-li-ti/index.html","hash":"584eff75b023ad3abf1286e21f9b001dd5278d09","modified":1681728348331},{"_id":"public/2023/04/16/yuque/shu-xing-bei-bao-de-jing-dian-li-ti/index.html","hash":"e68982a757e42baadde77336e5fbe317c81a350d","modified":1681728348331},{"_id":"source/_posts/yuque/测试没人.md","hash":"dbf4aeb1f412fdae412f562620795a65c79aa675","modified":1681728480248},{"_id":"source/_posts/yuque/我的介绍.md","hash":"69c881965b7b0c0cd083d429eb9dd37fbabc13d6","modified":1681730611886}],"Category":[{"name":"前端","_id":"clg9kiunl0000x0uff7bxbrx3"},{"name":"algorithm","_id":"clg9kuz1j0001tsufhe57bjce"},{"name":"frontend","_id":"clg9kuz1r0007tsuf8mqqenwd"},{"name":"fe","_id":"clgkppxtk0001f0ufaaul2rqg"},{"name":"daily","_id":"clgkqdbl80000e0uffxo245qk"}],"Data":[],"Page":[{"title":"categories","date":"2023-03-26T14:59:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-03-26 22:59:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-04-05T07:55:07.250Z","path":"categories/index.html","comments":1,"_id":"clg3ed3km00001wufhi8j27lt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-03-26T14:59:30.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-03-26 22:59:30\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-04-05T07:54:21.518Z","path":"tags/index.html","comments":1,"_id":"clg3ed3kp00011wuf12ywhnus","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-04-05T07:54:34.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-04-05 15:54:34\n---\n","updated":"2023-04-05T07:54:34.154Z","path":"about/index.html","comments":1,"layout":"page","_id":"clg3ed3kq00021wufdc6scqb5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"树形背包的经典例题","urlname":"rldo0b8nbizxocgg","date":"2023-04-16T14:40:48.000Z","_content":"\n### 树的重心：\n\n> 树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。\n\n求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。\n\n### 树的中心：\n\n> 一棵树有 n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近\n\n### [P1352 没有上司的舞会](https://www.luogu.com.cn/problem/P1352)\n\n---\n\n- 利用 dp 数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示 x 节点不去的最大价值，dp[1][x]则相反。\n- 计算当前节点去的最大值：就是直系子节点不去的最大值。\n- 当前节点不去的最大值：就是直系子节点去或者不去的最大值。\n- 对树进行深度优先搜索，在回溯的时候统计即可\n\n![](http://img.xinaode.top//FtfTQfCtTw1Qy1aPIPT0XhveEeb_.png)\n\n```cpp\n#include<iostream>\nusing namespace std;\nconst int N = 6010;\nstruct edge{\n\tint u, ne;\n} e[N];\nint joy[N], h[N],idx = 0, r[N], dp[2][N];\nvoid add(int x, int y){ //使用链式前向星存储\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x){\n\tdp[1][x] = joy[x];\n\tfor(int i = h[x];i;i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tdp[0][x] += dfs(u);\n\t\tdp[1][x] += dp[0][u];\n\t}\n\treturn max(dp[1][x],dp[0][x]);\n}\nint main(){\n\tint n;\n\tcin >> n;\n\tfor(int i= 1;i<=n;i++) cin >> joy[i];\n\tfor(int i = 1;i<= n -1;i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tr[x] = 1;\n\t\tadd(y,x);\n\t}\n\tint root = 1;\n\twhile(r[root]) root++;\n\tcout << dfs(root);\n\treturn 0;\n}\n```\n\n### [P1395 会议](https://www.luogu.com.cn/problem/P1395)\n\n---\n\n- 使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量\n- 重心是到达树上各点距离之和最小\n- 找到重心之后，使用 bfs 计算个点之和，使用 c[]数组来保存是 bfs 的第几层\n\n```cpp\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int N = 50010;\nstruct edge{\n\tint u, ne;\n} e[N*2];\nstruct ans{\n\tint u, v;\n} res;\nint h[N], n, idx = 0, v[N], ans, c[N];\nvoid add(int x, int y){\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x, int f){\n\tint size = 0;\n\tint sum = 1;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tif(u == f) continue;\n\t\tint s = dfs(u,x);\n\t\tsize = max(size,s);\n\t\tsum += s;\n\t}\n\tint v = max(size, n - sum);\n\tif(v < res.v || v == res.v && x < res.u) res= {x,v};\n\treturn sum;\n}\nvoid bfs(int x){\n\tqueue<int> q;\n\tq.push(x);\n\twhile(q.size()){\n\t\tint t = q.front();\n\t\tv[t] = 1;\n\t\tq.pop();\n\t\tfor(int i = h[t];i;i = e[i].ne){\n\t\t\tint u = e[i].u;\n\t\t\tif(!v[u]) {\n\t\t\t\tc[u]=c[t] + 1;\n\t\t\t\tq.push(u);\n\t\t\t\tans+=c[u];\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tcin >> n;\n\tfor(int i = 1;i<= n -1;i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tadd(y,x);\n\t\tadd(x,y);\n\t}\n\tres = {N,99999};\n\tdfs(1,0);\n\tbfs(res.u);\n\tcout << res.u << \" \";\n\tcout << ans;\n\treturn 0;\n}\n```\n\n### [P1273 有线电视网](https://www.luogu.com.cn/problem/P1273)\n\n---\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 3010;\nstruct edge{\n\tint u, v, ne;\n} e[N*10];\nint h[N], idx = 1, n, m, c[N], dp[N][N];\nvoid add(int x, int y, int z){\n\te[++idx] = {y,z,h[x]};\n\th[x] = idx;\n}\n//普通的树形dp: dp[i][j]为选择 i 为 根的子节点中， 容量为 j 的最大价值\n//本题的树形dp: dp[i][j]表示 i 为 根的子节点中，选择 j 个叶子节点的最少花费\n//dp[i][j] 表示节点 i 为根的子树中，选择 j 个叶子节点（用户）所需的最小费用。\n//对于非叶子节点 i（即分线器），我们需要遍历其所有子节点，分配用户数量，并计算总费用。\n//dp 数组可以帮助我们在这个过程中记录和查询子问题的解，从而避免重复计算，提高算法的效率。\nint dfs(int x){\n\tif(x > n - m) {\n\t\tdp[x][1] = c[x];\n\t\treturn 1;\n\t}\n\tint ans = 0, t;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u, v = e[i].v;\n\t\tt  = dfs(u);\n\t\tans += t;\n\t\tfor(int j = ans; j >= 1; j--){\n\t\t\tfor(int k = 1; k <= t; k++ ){\n\t\t\t\tif(j>=k) dp[x][j] = max(dp[x][j],dp[x][j-k] + dp[u][k] - e[i].v);\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n - m; i++){\n\t\tint j;\n\t\tcin >> j;\n\t\twhile(j--){\n\t\t\tint x, y;\n\t\t\tcin >> x >> y;\n\t\t\tadd(i,x,y);\n\t\t}\n\t}\n    memset(dp,~0x3f,sizeof(dp));//初始化一个极大负值，因为dp可能为负\n\tfor(int i = n - m + 1; i <= n; i++) cin >> c[i];\n    for (int i=1;i<=n;i++) dp[i][0]=0;//选0个用户的花费肯定是0啦\n\tdfs(1);\n\tfor (int i=m;i>=1;i--){\n\t\tif(dp[1][i] >= 0) {\n\t\t\tcout << i;\n\t\t\treturn 0;\n\t\t}\n\t}\n    return 0;\n}\n```\n","source":"_posts/yuque/树形背包的经典例题.md","raw":"---\ntitle: 树形背包的经典例题\nurlname: rldo0b8nbizxocgg\ndate: '2023-04-16 22:40:48 +0800'\ntags:\n  - 树形dp\n  - 分组背包\ncategories:\n  - algorithm\n---\n\n### 树的重心：\n\n> 树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。\n\n求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。\n\n### 树的中心：\n\n> 一棵树有 n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近\n\n### [P1352 没有上司的舞会](https://www.luogu.com.cn/problem/P1352)\n\n---\n\n- 利用 dp 数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示 x 节点不去的最大价值，dp[1][x]则相反。\n- 计算当前节点去的最大值：就是直系子节点不去的最大值。\n- 当前节点不去的最大值：就是直系子节点去或者不去的最大值。\n- 对树进行深度优先搜索，在回溯的时候统计即可\n\n![](http://img.xinaode.top//FtfTQfCtTw1Qy1aPIPT0XhveEeb_.png)\n\n```cpp\n#include<iostream>\nusing namespace std;\nconst int N = 6010;\nstruct edge{\n\tint u, ne;\n} e[N];\nint joy[N], h[N],idx = 0, r[N], dp[2][N];\nvoid add(int x, int y){ //使用链式前向星存储\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x){\n\tdp[1][x] = joy[x];\n\tfor(int i = h[x];i;i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tdp[0][x] += dfs(u);\n\t\tdp[1][x] += dp[0][u];\n\t}\n\treturn max(dp[1][x],dp[0][x]);\n}\nint main(){\n\tint n;\n\tcin >> n;\n\tfor(int i= 1;i<=n;i++) cin >> joy[i];\n\tfor(int i = 1;i<= n -1;i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tr[x] = 1;\n\t\tadd(y,x);\n\t}\n\tint root = 1;\n\twhile(r[root]) root++;\n\tcout << dfs(root);\n\treturn 0;\n}\n```\n\n### [P1395 会议](https://www.luogu.com.cn/problem/P1395)\n\n---\n\n- 使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量\n- 重心是到达树上各点距离之和最小\n- 找到重心之后，使用 bfs 计算个点之和，使用 c[]数组来保存是 bfs 的第几层\n\n```cpp\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int N = 50010;\nstruct edge{\n\tint u, ne;\n} e[N*2];\nstruct ans{\n\tint u, v;\n} res;\nint h[N], n, idx = 0, v[N], ans, c[N];\nvoid add(int x, int y){\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x, int f){\n\tint size = 0;\n\tint sum = 1;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tif(u == f) continue;\n\t\tint s = dfs(u,x);\n\t\tsize = max(size,s);\n\t\tsum += s;\n\t}\n\tint v = max(size, n - sum);\n\tif(v < res.v || v == res.v && x < res.u) res= {x,v};\n\treturn sum;\n}\nvoid bfs(int x){\n\tqueue<int> q;\n\tq.push(x);\n\twhile(q.size()){\n\t\tint t = q.front();\n\t\tv[t] = 1;\n\t\tq.pop();\n\t\tfor(int i = h[t];i;i = e[i].ne){\n\t\t\tint u = e[i].u;\n\t\t\tif(!v[u]) {\n\t\t\t\tc[u]=c[t] + 1;\n\t\t\t\tq.push(u);\n\t\t\t\tans+=c[u];\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tcin >> n;\n\tfor(int i = 1;i<= n -1;i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tadd(y,x);\n\t\tadd(x,y);\n\t}\n\tres = {N,99999};\n\tdfs(1,0);\n\tbfs(res.u);\n\tcout << res.u << \" \";\n\tcout << ans;\n\treturn 0;\n}\n```\n\n### [P1273 有线电视网](https://www.luogu.com.cn/problem/P1273)\n\n---\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 3010;\nstruct edge{\n\tint u, v, ne;\n} e[N*10];\nint h[N], idx = 1, n, m, c[N], dp[N][N];\nvoid add(int x, int y, int z){\n\te[++idx] = {y,z,h[x]};\n\th[x] = idx;\n}\n//普通的树形dp: dp[i][j]为选择 i 为 根的子节点中， 容量为 j 的最大价值\n//本题的树形dp: dp[i][j]表示 i 为 根的子节点中，选择 j 个叶子节点的最少花费\n//dp[i][j] 表示节点 i 为根的子树中，选择 j 个叶子节点（用户）所需的最小费用。\n//对于非叶子节点 i（即分线器），我们需要遍历其所有子节点，分配用户数量，并计算总费用。\n//dp 数组可以帮助我们在这个过程中记录和查询子问题的解，从而避免重复计算，提高算法的效率。\nint dfs(int x){\n\tif(x > n - m) {\n\t\tdp[x][1] = c[x];\n\t\treturn 1;\n\t}\n\tint ans = 0, t;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u, v = e[i].v;\n\t\tt  = dfs(u);\n\t\tans += t;\n\t\tfor(int j = ans; j >= 1; j--){\n\t\t\tfor(int k = 1; k <= t; k++ ){\n\t\t\t\tif(j>=k) dp[x][j] = max(dp[x][j],dp[x][j-k] + dp[u][k] - e[i].v);\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n - m; i++){\n\t\tint j;\n\t\tcin >> j;\n\t\twhile(j--){\n\t\t\tint x, y;\n\t\t\tcin >> x >> y;\n\t\t\tadd(i,x,y);\n\t\t}\n\t}\n    memset(dp,~0x3f,sizeof(dp));//初始化一个极大负值，因为dp可能为负\n\tfor(int i = n - m + 1; i <= n; i++) cin >> c[i];\n    for (int i=1;i<=n;i++) dp[i][0]=0;//选0个用户的花费肯定是0啦\n\tdfs(1);\n\tfor (int i=m;i>=1;i--){\n\t\tif(dp[1][i] >= 0) {\n\t\t\tcout << i;\n\t\t\treturn 0;\n\t\t}\n\t}\n    return 0;\n}\n```\n","slug":"yuque/树形背包的经典例题","published":1,"updated":"2023-04-17T11:25:22.481Z","_id":"clgkq4s8l0000douf1mqd9yqx","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"树的重心：\"><a href=\"#树的重心：\" class=\"headerlink\" title=\"树的重心：\"></a>树的重心：</h3><blockquote>\n<p>树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。</p>\n</blockquote>\n<p>求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。</p>\n<h3 id=\"树的中心：\"><a href=\"#树的中心：\" class=\"headerlink\" title=\"树的中心：\"></a>树的中心：</h3><blockquote>\n<p>一棵树有 n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近</p>\n</blockquote>\n<h3 id=\"P1352-没有上司的舞会\"><a href=\"#P1352-没有上司的舞会\" class=\"headerlink\" title=\"P1352 没有上司的舞会\"></a><a href=\"https://www.luogu.com.cn/problem/P1352\">P1352 没有上司的舞会</a></h3><hr>\n<ul>\n<li>利用 dp 数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示 x 节点不去的最大价值，dp[1][x]则相反。</li>\n<li>计算当前节点去的最大值：就是直系子节点不去的最大值。</li>\n<li>当前节点不去的最大值：就是直系子节点去或者不去的最大值。</li>\n<li>对树进行深度优先搜索，在回溯的时候统计即可</li>\n</ul>\n<p><a href=\"http://img.xinaode.top//FtfTQfCtTw1Qy1aPIPT0XhveEeb_.png\" data-fancybox='lightbox' data-caption=\"\"><img   src=\"http://img.xinaode.top//FtfTQfCtTw1Qy1aPIPT0XhveEeb_.png\" ></a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">6010</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> u, ne;</span><br><span class=\"line\">&#125; e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> joy[N], h[N],idx = <span class=\"number\">0</span>, r[N], dp[<span class=\"number\">2</span>][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span>&#123; <span class=\"comment\">//使用链式前向星存储</span></span><br><span class=\"line\">\te[++idx] = &#123;y,h[x]&#125;;</span><br><span class=\"line\">\th[x] = idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>][x] = joy[x];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x];i;i = e[i].ne)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u = e[i].u;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">0</span>][x] += <span class=\"built_in\">dfs</span>(u);</span><br><span class=\"line\">\t\tdp[<span class=\"number\">1</span>][x] += dp[<span class=\"number\">0</span>][u];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp[<span class=\"number\">1</span>][x],dp[<span class=\"number\">0</span>][x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i= <span class=\"number\">1</span>;i&lt;=n;i++) cin &gt;&gt; joy[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;= n <span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t\tcin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\t\tr[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(y,x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> root = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(r[root]) root++;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">dfs</span>(root);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"P1395-会议\"><a href=\"#P1395-会议\" class=\"headerlink\" title=\"P1395 会议\"></a><a href=\"https://www.luogu.com.cn/problem/P1395\">P1395 会议</a></h3><hr>\n<ul>\n<li>使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量</li>\n<li>重心是到达树上各点距离之和最小</li>\n<li>找到重心之后，使用 bfs 计算个点之和，使用 c[]数组来保存是 bfs 的第几层</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> u, ne;</span><br><span class=\"line\">&#125; e[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ans</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> u, v;</span><br><span class=\"line\">&#125; res;</span><br><span class=\"line\"><span class=\"type\">int</span> h[N], n, idx = <span class=\"number\">0</span>, v[N], ans, c[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\te[++idx] = &#123;y,h[x]&#125;;</span><br><span class=\"line\">\th[x] = idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = e[i].ne)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u = e[i].u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(u == f) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> s = <span class=\"built_in\">dfs</span>(u,x);</span><br><span class=\"line\">\t\tsize = <span class=\"built_in\">max</span>(size,s);</span><br><span class=\"line\">\t\tsum += s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> v = <span class=\"built_in\">max</span>(size, n - sum);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v &lt; res.v || v == res.v &amp;&amp; x &lt; res.u) res= &#123;x,v&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\tqueue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">\tq.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">\t\tv[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[t];i;i = e[i].ne)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> u = e[i].u;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!v[u]) &#123;</span><br><span class=\"line\">\t\t\t\tc[u]=c[t] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tq.<span class=\"built_in\">push</span>(u);</span><br><span class=\"line\">\t\t\t\tans+=c[u];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;= n <span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t\tcin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(y,x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(x,y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres = &#123;N,<span class=\"number\">99999</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">bfs</span>(res.u);</span><br><span class=\"line\">\tcout &lt;&lt; res.u &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; ans;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"P1273-有线电视网\"><a href=\"#P1273-有线电视网\" class=\"headerlink\" title=\"P1273 有线电视网\"></a><a href=\"https://www.luogu.com.cn/problem/P1273\">P1273 有线电视网</a></h3><hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">3010</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> u, v, ne;</span><br><span class=\"line\">&#125; e[N*<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> h[N], idx = <span class=\"number\">1</span>, n, m, c[N], dp[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> z)</span></span>&#123;</span><br><span class=\"line\">\te[++idx] = &#123;y,z,h[x]&#125;;</span><br><span class=\"line\">\th[x] = idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//普通的树形dp: dp[i][j]为选择 i 为 根的子节点中， 容量为 j 的最大价值</span></span><br><span class=\"line\"><span class=\"comment\">//本题的树形dp: dp[i][j]表示 i 为 根的子节点中，选择 j 个叶子节点的最少花费</span></span><br><span class=\"line\"><span class=\"comment\">//dp[i][j] 表示节点 i 为根的子树中，选择 j 个叶子节点（用户）所需的最小费用。</span></span><br><span class=\"line\"><span class=\"comment\">//对于非叶子节点 i（即分线器），我们需要遍历其所有子节点，分配用户数量，并计算总费用。</span></span><br><span class=\"line\"><span class=\"comment\">//dp 数组可以帮助我们在这个过程中记录和查询子问题的解，从而避免重复计算，提高算法的效率。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &gt; n - m) &#123;</span><br><span class=\"line\">\t\tdp[x][<span class=\"number\">1</span>] = c[x];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans = <span class=\"number\">0</span>, t;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = e[i].ne)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u = e[i].u, v = e[i].v;</span><br><span class=\"line\">\t\tt  = <span class=\"built_in\">dfs</span>(u);</span><br><span class=\"line\">\t\tans += t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = ans; j &gt;= <span class=\"number\">1</span>; j--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= t; k++ )&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(j&gt;=k) dp[x][j] = <span class=\"built_in\">max</span>(dp[x][j],dp[x][j-k] + dp[u][k] - e[i].v);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - m; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> j;</span><br><span class=\"line\">\t\tcin &gt;&gt; j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add</span>(i,x,y);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,~<span class=\"number\">0x3f</span>,<span class=\"built_in\">sizeof</span>(dp));<span class=\"comment\">//初始化一个极大负值，因为dp可能为负</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - m + <span class=\"number\">1</span>; i &lt;= n; i++) cin &gt;&gt; c[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) dp[i][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;<span class=\"comment\">//选0个用户的花费肯定是0啦</span></span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=m;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dp[<span class=\"number\">1</span>][i] &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"树的重心：\"><a href=\"#树的重心：\" class=\"headerlink\" title=\"树的重心：\"></a>树的重心：</h3><blockquote>\n<p>树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。</p>\n</blockquote>\n<p>求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。</p>\n<h3 id=\"树的中心：\"><a href=\"#树的中心：\" class=\"headerlink\" title=\"树的中心：\"></a>树的中心：</h3><blockquote>\n<p>一棵树有 n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近</p>\n</blockquote>\n<h3 id=\"P1352-没有上司的舞会\"><a href=\"#P1352-没有上司的舞会\" class=\"headerlink\" title=\"P1352 没有上司的舞会\"></a><a href=\"https://www.luogu.com.cn/problem/P1352\">P1352 没有上司的舞会</a></h3><hr>\n<ul>\n<li>利用 dp 数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示 x 节点不去的最大价值，dp[1][x]则相反。</li>\n<li>计算当前节点去的最大值：就是直系子节点不去的最大值。</li>\n<li>当前节点不去的最大值：就是直系子节点去或者不去的最大值。</li>\n<li>对树进行深度优先搜索，在回溯的时候统计即可</li>\n</ul>\n<p><a href=\"http://img.xinaode.top//FtfTQfCtTw1Qy1aPIPT0XhveEeb_.png\" data-fancybox='lightbox' data-caption=\"\"><img   src=\"http://img.xinaode.top//FtfTQfCtTw1Qy1aPIPT0XhveEeb_.png\" ></a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">6010</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> u, ne;</span><br><span class=\"line\">&#125; e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> joy[N], h[N],idx = <span class=\"number\">0</span>, r[N], dp[<span class=\"number\">2</span>][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span>&#123; <span class=\"comment\">//使用链式前向星存储</span></span><br><span class=\"line\">\te[++idx] = &#123;y,h[x]&#125;;</span><br><span class=\"line\">\th[x] = idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>][x] = joy[x];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x];i;i = e[i].ne)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u = e[i].u;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">0</span>][x] += <span class=\"built_in\">dfs</span>(u);</span><br><span class=\"line\">\t\tdp[<span class=\"number\">1</span>][x] += dp[<span class=\"number\">0</span>][u];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp[<span class=\"number\">1</span>][x],dp[<span class=\"number\">0</span>][x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i= <span class=\"number\">1</span>;i&lt;=n;i++) cin &gt;&gt; joy[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;= n <span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t\tcin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\t\tr[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(y,x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> root = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(r[root]) root++;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">dfs</span>(root);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"P1395-会议\"><a href=\"#P1395-会议\" class=\"headerlink\" title=\"P1395 会议\"></a><a href=\"https://www.luogu.com.cn/problem/P1395\">P1395 会议</a></h3><hr>\n<ul>\n<li>使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量</li>\n<li>重心是到达树上各点距离之和最小</li>\n<li>找到重心之后，使用 bfs 计算个点之和，使用 c[]数组来保存是 bfs 的第几层</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> u, ne;</span><br><span class=\"line\">&#125; e[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ans</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> u, v;</span><br><span class=\"line\">&#125; res;</span><br><span class=\"line\"><span class=\"type\">int</span> h[N], n, idx = <span class=\"number\">0</span>, v[N], ans, c[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\te[++idx] = &#123;y,h[x]&#125;;</span><br><span class=\"line\">\th[x] = idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = e[i].ne)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u = e[i].u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(u == f) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> s = <span class=\"built_in\">dfs</span>(u,x);</span><br><span class=\"line\">\t\tsize = <span class=\"built_in\">max</span>(size,s);</span><br><span class=\"line\">\t\tsum += s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> v = <span class=\"built_in\">max</span>(size, n - sum);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v &lt; res.v || v == res.v &amp;&amp; x &lt; res.u) res= &#123;x,v&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\tqueue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">\tq.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">\t\tv[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[t];i;i = e[i].ne)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> u = e[i].u;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!v[u]) &#123;</span><br><span class=\"line\">\t\t\t\tc[u]=c[t] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tq.<span class=\"built_in\">push</span>(u);</span><br><span class=\"line\">\t\t\t\tans+=c[u];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;= n <span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t\tcin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(y,x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(x,y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres = &#123;N,<span class=\"number\">99999</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">bfs</span>(res.u);</span><br><span class=\"line\">\tcout &lt;&lt; res.u &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; ans;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"P1273-有线电视网\"><a href=\"#P1273-有线电视网\" class=\"headerlink\" title=\"P1273 有线电视网\"></a><a href=\"https://www.luogu.com.cn/problem/P1273\">P1273 有线电视网</a></h3><hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">3010</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> u, v, ne;</span><br><span class=\"line\">&#125; e[N*<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> h[N], idx = <span class=\"number\">1</span>, n, m, c[N], dp[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> z)</span></span>&#123;</span><br><span class=\"line\">\te[++idx] = &#123;y,z,h[x]&#125;;</span><br><span class=\"line\">\th[x] = idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//普通的树形dp: dp[i][j]为选择 i 为 根的子节点中， 容量为 j 的最大价值</span></span><br><span class=\"line\"><span class=\"comment\">//本题的树形dp: dp[i][j]表示 i 为 根的子节点中，选择 j 个叶子节点的最少花费</span></span><br><span class=\"line\"><span class=\"comment\">//dp[i][j] 表示节点 i 为根的子树中，选择 j 个叶子节点（用户）所需的最小费用。</span></span><br><span class=\"line\"><span class=\"comment\">//对于非叶子节点 i（即分线器），我们需要遍历其所有子节点，分配用户数量，并计算总费用。</span></span><br><span class=\"line\"><span class=\"comment\">//dp 数组可以帮助我们在这个过程中记录和查询子问题的解，从而避免重复计算，提高算法的效率。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &gt; n - m) &#123;</span><br><span class=\"line\">\t\tdp[x][<span class=\"number\">1</span>] = c[x];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans = <span class=\"number\">0</span>, t;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = e[i].ne)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u = e[i].u, v = e[i].v;</span><br><span class=\"line\">\t\tt  = <span class=\"built_in\">dfs</span>(u);</span><br><span class=\"line\">\t\tans += t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = ans; j &gt;= <span class=\"number\">1</span>; j--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= t; k++ )&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(j&gt;=k) dp[x][j] = <span class=\"built_in\">max</span>(dp[x][j],dp[x][j-k] + dp[u][k] - e[i].v);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - m; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> j;</span><br><span class=\"line\">\t\tcin &gt;&gt; j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add</span>(i,x,y);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,~<span class=\"number\">0x3f</span>,<span class=\"built_in\">sizeof</span>(dp));<span class=\"comment\">//初始化一个极大负值，因为dp可能为负</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - m + <span class=\"number\">1</span>; i &lt;= n; i++) cin &gt;&gt; c[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) dp[i][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;<span class=\"comment\">//选0个用户的花费肯定是0啦</span></span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=m;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dp[<span class=\"number\">1</span>][i] &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"我的介绍","urlname":"xrg4z8gpd714zrvr","date":"2023-04-09T08:37:53.000Z","_content":"\n我的博客\n记录学习的内容进行知识分享，@yier\n![](http://img.xinaode.top//FqVF-gTwmZf5EdSIAmg-IbDgWwrW.png)\n","source":"_posts/yuque/我的介绍.md","raw":"---\ntitle: 我的介绍\nurlname: xrg4z8gpd714zrvr\ndate: '2023-04-09 16:37:53 +0800'\ntags:\n  - profile\n  - hobby\ncategories:\n  - daily\n---\n\n我的博客\n记录学习的内容进行知识分享，@yier\n![](http://img.xinaode.top//FqVF-gTwmZf5EdSIAmg-IbDgWwrW.png)\n","slug":"yuque/我的介绍","published":1,"updated":"2023-04-17T11:23:31.886Z","_id":"clgkqavl90000b0uf2e0zbb7b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我的博客<br>记录学习的内容进行知识分享，@yier<br><a href=\"http://img.xinaode.top//FqVF-gTwmZf5EdSIAmg-IbDgWwrW.png\" data-fancybox='lightbox' data-caption=\"\"><img   src=\"http://img.xinaode.top//FqVF-gTwmZf5EdSIAmg-IbDgWwrW.png\" ></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我的博客<br>记录学习的内容进行知识分享，@yier<br><a href=\"http://img.xinaode.top//FqVF-gTwmZf5EdSIAmg-IbDgWwrW.png\" data-fancybox='lightbox' data-caption=\"\"><img   src=\"http://img.xinaode.top//FqVF-gTwmZf5EdSIAmg-IbDgWwrW.png\" ></a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clgkq4s8l0000douf1mqd9yqx","category_id":"clg9kuz1j0001tsufhe57bjce","_id":"clgkq4s8s0003doufbpbjef2c"},{"post_id":"clgkqavl90000b0uf2e0zbb7b","category_id":"clgkqdbl80000e0uffxo245qk","_id":"clgkqzkf200027kufftfq9nrx"}],"PostTag":[{"post_id":"clgkq4s8l0000douf1mqd9yqx","tag_id":"clgkpuxak0000s8uf96l2aync","_id":"clgkq4s8s0001doufh2zgeigf"},{"post_id":"clgkq4s8l0000douf1mqd9yqx","tag_id":"clgkpuxan0002s8ufedu9hlxg","_id":"clgkq4s8s0002douf80y53fo4"},{"post_id":"clgkqavl90000b0uf2e0zbb7b","tag_id":"clgkqdbla0001e0uf318rbwv6","_id":"clgkqzkf100007kufc7f4bhlq"},{"post_id":"clgkqavl90000b0uf2e0zbb7b","tag_id":"clgkqdblb0002e0ufbi55c7g4","_id":"clgkqzkf200017kuf38cv4j0s"}],"Tag":[{"name":"node","_id":"clg9kiunm0001x0ufcxsx34k7"},{"name":"博客","_id":"clg9kiunn0002x0uf6tchfxp8"},{"name":"讲义","_id":"clg9kuz1m0002tsuf31qjatmb"},{"name":"课程","_id":"clg9kuz1n0003tsuf0mgse02f"},{"name":"hexo","_id":"clgkppxtq0002f0uf5ese42pv"},{"name":"树形dp","_id":"clgkpuxak0000s8uf96l2aync"},{"name":"分组背包","_id":"clgkpuxan0002s8ufedu9hlxg"},{"name":"profile","_id":"clgkqdbla0001e0uf318rbwv6"},{"name":"hobby","_id":"clgkqdblb0002e0ufbi55c7g4"}]}}