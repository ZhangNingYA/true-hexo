[
  {
    "id": 122036941,
    "slug": "rldo0b8nbizxocgg",
    "title": "树形背包的经典例题",
    "book_id": 37139568,
    "book": {
      "id": 37139568,
      "type": "Book",
      "slug": "puv4o1",
      "name": "随笔",
      "user_id": 25981481,
      "description": "我的个人随笔",
      "creator_id": 25981481,
      "public": 1,
      "items_count": 2,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-04-17T11:25:12.865Z",
      "updated_at": "2023-04-17T11:25:13.000Z",
      "created_at": "2023-04-09T08:13:42.000Z",
      "namespace": "xii-panda/puv4o1",
      "user": {
        "id": 25981481,
        "type": "User",
        "login": "xii-panda",
        "name": "我的语雀",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/25981481/1642922091375-avatar/ac777239-4437-4aad-b1b4-2e8c1e8dde6d.png",
        "books_count": 5,
        "public_books_count": 4,
        "followers_count": 0,
        "following_count": 1,
        "created_at": "2022-01-23T07:13:12.000Z",
        "updated_at": "2023-04-17T10:43:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 25981481,
    "creator": {
      "id": 25981481,
      "type": "User",
      "login": "xii-panda",
      "name": "我的语雀",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/25981481/1642922091375-avatar/ac777239-4437-4aad-b1b4-2e8c1e8dde6d.png",
      "books_count": 5,
      "public_books_count": 4,
      "followers_count": 0,
      "following_count": 1,
      "created_at": "2022-01-23T07:13:12.000Z",
      "updated_at": "2023-04-17T10:43:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [树形dp, 分组背包]<br />categories: [algorithm]<br />---\n\n<a name=\"RxQ3i\"></a>\n### 树的重心：\n> 树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。\n\n\n求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。\n\n<a name=\"u04n3\"></a>\n### 树的中心：\n> 一棵树有n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近\n\n\n<a name=\"zBIOp\"></a>\n### [P1352 没有上司的舞会](https://www.luogu.com.cn/problem/P1352)\n\n---\n\n- 利用dp数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示x节点不去的最大价值，dp[1][x]则相反。\n- 计算当前节点去的最大值：就是直系子节点不去的最大值。\n- 当前节点不去的最大值：就是直系子节点去或者不去的最大值。\n- 对树进行深度优先搜索，在回溯的时候统计即可\n\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/25981481/1681658252326-09f87868-e8bc-491c-80b5-88f829f5b501.png#averageHue=%23f2f2f2&clientId=u850e70ac-96e7-4&from=paste&height=448&id=u20f3663d&name=image.png&originHeight=448&originWidth=566&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23775&status=done&style=none&taskId=u3104710e-2ddf-4770-90ab-beb045d88eb&title=&width=566)\n```cpp\n#include<iostream>\nusing namespace std;\nconst int N = 6010;\nstruct edge{\n\tint u, ne;\n} e[N];\nint joy[N], h[N],idx = 0, r[N], dp[2][N];\nvoid add(int x, int y){ //使用链式前向星存储\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x){\n\tdp[1][x] = joy[x];\n\tfor(int i = h[x];i;i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tdp[0][x] += dfs(u);\n\t\tdp[1][x] += dp[0][u];\n\t}\n\treturn max(dp[1][x],dp[0][x]);\n}\nint main(){\n\tint n;\n\tcin >> n;\n\tfor(int i= 1;i<=n;i++) cin >> joy[i];\n\tfor(int i = 1;i<= n -1;i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tr[x] = 1;\n\t\tadd(y,x);\n\t}\n\tint root = 1;\n\twhile(r[root]) root++;\n\tcout << dfs(root);\n\treturn 0;\n} \n```\n<a name=\"PEBd5\"></a>\n### [P1395 会议](https://www.luogu.com.cn/problem/P1395)\n\n---\n\n- 使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量\n- 重心是到达树上各点距离之和最小\n- 找到重心之后，使用 bfs 计算个点之和，使用c[]数组来保存是 bfs 的第几层\n```cpp\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int N = 50010;\nstruct edge{\n\tint u, ne;\n} e[N*2];\nstruct ans{\n\tint u, v;\n} res;\nint h[N], n, idx = 0, v[N], ans, c[N];\nvoid add(int x, int y){\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x, int f){\n\tint size = 0;\n\tint sum = 1;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tif(u == f) continue;\n\t\tint s = dfs(u,x);\n\t\tsize = max(size,s);\n\t\tsum += s;\n\t}\n\tint v = max(size, n - sum);\n\tif(v < res.v || v == res.v && x < res.u) res= {x,v};\n\treturn sum;\n}\nvoid bfs(int x){\n\tqueue<int> q;\n\tq.push(x);\n\twhile(q.size()){\n\t\tint t = q.front();\n\t\tv[t] = 1;\n\t\tq.pop();\n\t\tfor(int i = h[t];i;i = e[i].ne){\n\t\t\tint u = e[i].u;\n\t\t\tif(!v[u]) {\n\t\t\t\tc[u]=c[t] + 1;\n\t\t\t\tq.push(u);\n\t\t\t\tans+=c[u];\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tcin >> n;\n\tfor(int i = 1;i<= n -1;i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tadd(y,x);\n\t\tadd(x,y);\n\t}\n\tres = {N,99999};\n\tdfs(1,0);\n\tbfs(res.u);\n\tcout << res.u << \" \";\n\tcout << ans;\n\treturn 0;\n} \n```\n<a name=\"ZIHMB\"></a>\n### [P1273 有线电视网](https://www.luogu.com.cn/problem/P1273)\n\n---\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 3010;\nstruct edge{\n\tint u, v, ne;\n} e[N*10];\nint h[N], idx = 1, n, m, c[N], dp[N][N];\nvoid add(int x, int y, int z){\n\te[++idx] = {y,z,h[x]};\n\th[x] = idx;\n}\n//普通的树形dp: dp[i][j]为选择 i 为 根的子节点中， 容量为 j 的最大价值 \n//本题的树形dp: dp[i][j]表示 i 为 根的子节点中，选择 j 个叶子节点的最少花费 \n//dp[i][j] 表示节点 i 为根的子树中，选择 j 个叶子节点（用户）所需的最小费用。\n//对于非叶子节点 i（即分线器），我们需要遍历其所有子节点，分配用户数量，并计算总费用。\n//dp 数组可以帮助我们在这个过程中记录和查询子问题的解，从而避免重复计算，提高算法的效率。\nint dfs(int x){\n\tif(x > n - m) {\n\t\tdp[x][1] = c[x];\n\t\treturn 1;\n\t}\n\tint ans = 0, t;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u, v = e[i].v;\n\t\tt  = dfs(u);\n\t\tans += t;\n\t\tfor(int j = ans; j >= 1; j--){\n\t\t\tfor(int k = 1; k <= t; k++ ){\n\t\t\t\tif(j>=k) dp[x][j] = max(dp[x][j],dp[x][j-k] + dp[u][k] - e[i].v);\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n - m; i++){\n\t\tint j;\n\t\tcin >> j;\n\t\twhile(j--){\n\t\t\tint x, y;\n\t\t\tcin >> x >> y;\n\t\t\tadd(i,x,y);\n\t\t}\n\t}\n    memset(dp,~0x3f,sizeof(dp));//初始化一个极大负值，因为dp可能为负\n\tfor(int i = n - m + 1; i <= n; i++) cin >> c[i];\n    for (int i=1;i<=n;i++) dp[i][0]=0;//选0个用户的花费肯定是0啦\n\tdfs(1);\n\tfor (int i=m;i>=1;i--){\t\n\t\tif(dp[1][i] >= 0) {\n\t\t\tcout << i;\n\t\t\treturn 0;\n\t\t}\n\t}\n    return 0;\n}\n```\n",
    "body_draft": "tags: [树形dp, 分组背包]<br />categories: [algorithm]<br />---\n\n<a name=\"RxQ3i\"></a>\n### 树的重心：\n> 树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。\n\n\n求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。\n\n<a name=\"u04n3\"></a>\n### 树的中心：\n> 一棵树有n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近\n\n\n<a name=\"zBIOp\"></a>\n### [P1352 没有上司的舞会](https://www.luogu.com.cn/problem/P1352)\n\n---\n\n- 利用dp数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示x节点不去的最大价值，dp[1][x]则相反。\n- 计算当前节点去的最大值：就是直系子节点不去的最大值。\n- 当前节点不去的最大值：就是直系子节点去或者不去的最大值。\n- 对树进行深度优先搜索，在回溯的时候统计即可\n\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/25981481/1681658252326-09f87868-e8bc-491c-80b5-88f829f5b501.png#averageHue=%23f2f2f2&clientId=u850e70ac-96e7-4&from=paste&height=448&id=u20f3663d&name=image.png&originHeight=448&originWidth=566&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23775&status=done&style=none&taskId=u3104710e-2ddf-4770-90ab-beb045d88eb&title=&width=566)\n```cpp\n#include<iostream>\nusing namespace std;\nconst int N = 6010;\nstruct edge{\n\tint u, ne;\n} e[N];\nint joy[N], h[N],idx = 0, r[N], dp[2][N];\nvoid add(int x, int y){ //使用链式前向星存储\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x){\n\tdp[1][x] = joy[x];\n\tfor(int i = h[x];i;i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tdp[0][x] += dfs(u);\n\t\tdp[1][x] += dp[0][u];\n\t}\n\treturn max(dp[1][x],dp[0][x]);\n}\nint main(){\n\tint n;\n\tcin >> n;\n\tfor(int i= 1;i<=n;i++) cin >> joy[i];\n\tfor(int i = 1;i<= n -1;i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tr[x] = 1;\n\t\tadd(y,x);\n\t}\n\tint root = 1;\n\twhile(r[root]) root++;\n\tcout << dfs(root);\n\treturn 0;\n} \n```\n<a name=\"PEBd5\"></a>\n### [P1395 会议](https://www.luogu.com.cn/problem/P1395)\n\n---\n\n- 使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量\n- 重心是到达树上各点距离之和最小\n- 找到重心之后，使用 bfs 计算个点之和，使用c[]数组来保存是 bfs 的第几层\n```cpp\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int N = 50010;\nstruct edge{\n\tint u, ne;\n} e[N*2];\nstruct ans{\n\tint u, v;\n} res;\nint h[N], n, idx = 0, v[N], ans, c[N];\nvoid add(int x, int y){\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x, int f){\n\tint size = 0;\n\tint sum = 1;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tif(u == f) continue;\n\t\tint s = dfs(u,x);\n\t\tsize = max(size,s);\n\t\tsum += s;\n\t}\n\tint v = max(size, n - sum);\n\tif(v < res.v || v == res.v && x < res.u) res= {x,v};\n\treturn sum;\n}\nvoid bfs(int x){\n\tqueue<int> q;\n\tq.push(x);\n\twhile(q.size()){\n\t\tint t = q.front();\n\t\tv[t] = 1;\n\t\tq.pop();\n\t\tfor(int i = h[t];i;i = e[i].ne){\n\t\t\tint u = e[i].u;\n\t\t\tif(!v[u]) {\n\t\t\t\tc[u]=c[t] + 1;\n\t\t\t\tq.push(u);\n\t\t\t\tans+=c[u];\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tcin >> n;\n\tfor(int i = 1;i<= n -1;i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tadd(y,x);\n\t\tadd(x,y);\n\t}\n\tres = {N,99999};\n\tdfs(1,0);\n\tbfs(res.u);\n\tcout << res.u << \" \";\n\tcout << ans;\n\treturn 0;\n} \n```\n<a name=\"ZIHMB\"></a>\n### [P1273 有线电视网](https://www.luogu.com.cn/problem/P1273)\n\n---\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 3010;\nstruct edge{\n\tint u, v, ne;\n} e[N*10];\nint h[N], idx = 1, n, m, c[N], dp[N][N];\nvoid add(int x, int y, int z){\n\te[++idx] = {y,z,h[x]};\n\th[x] = idx;\n}\n//普通的树形dp: dp[i][j]为选择 i 为 根的子节点中， 容量为 j 的最大价值 \n//本题的树形dp: dp[i][j]表示 i 为 根的子节点中，选择 j 个叶子节点的最少花费 \n//dp[i][j] 表示节点 i 为根的子树中，选择 j 个叶子节点（用户）所需的最小费用。\n//对于非叶子节点 i（即分线器），我们需要遍历其所有子节点，分配用户数量，并计算总费用。\n//dp 数组可以帮助我们在这个过程中记录和查询子问题的解，从而避免重复计算，提高算法的效率。\nint dfs(int x){\n\tif(x > n - m) {\n\t\tdp[x][1] = c[x];\n\t\treturn 1;\n\t}\n\tint ans = 0, t;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u, v = e[i].v;\n\t\tt  = dfs(u);\n\t\tans += t;\n\t\tfor(int j = ans; j >= 1; j--){\n\t\t\tfor(int k = 1; k <= t; k++ ){\n\t\t\t\tif(j>=k) dp[x][j] = max(dp[x][j],dp[x][j-k] + dp[u][k] - e[i].v);\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n - m; i++){\n\t\tint j;\n\t\tcin >> j;\n\t\twhile(j--){\n\t\t\tint x, y;\n\t\t\tcin >> x >> y;\n\t\t\tadd(i,x,y);\n\t\t}\n\t}\n    memset(dp,~0x3f,sizeof(dp));//初始化一个极大负值，因为dp可能为负\n\tfor(int i = n - m + 1; i <= n; i++) cin >> c[i];\n    for (int i=1;i<=n;i++) dp[i][0]=0;//选0个用户的花费肯定是0啦\n\tdfs(1);\n\tfor (int i=m;i>=1;i--){\t\n\t\tif(dp[1][i] >= 0) {\n\t\t\tcout << i;\n\t\t\treturn 0;\n\t\t}\n\t}\n    return 0;\n}\n```\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"ube0fd458\" class=\"ne-p\"><span class=\"ne-text\">tags: [树形dp, 分组背包]</span></p><p id=\"ueae95ebe\" class=\"ne-p\"><span class=\"ne-text\">categories: [algorithm]</span></p><p id=\"u5649a495\" class=\"ne-p\"><span class=\"ne-text\">---</span></p><p id=\"u25e5b768\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h3 id=\"RxQ3i\"><span class=\"ne-text\">树的重心：</span></h3><div class=\"ne-quote\"><p id=\"u9ee15660\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 47); font-size: 14px\">树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。</span></p></div><p id=\"u8978afac\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 47); font-size: 14px\"></span></p><p id=\"u464041e4\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 47); font-size: 14px\">求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。</span></p><p id=\"uc91e4308\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 47); font-size: 14px\"></span></p><h3 id=\"u04n3\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 47)\">树的中心：</span></h3><div class=\"ne-quote\"><p id=\"u3581fe9f\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">一棵树有n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近</span></p></div><p id=\"u87cc8fc6\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\"></span></p><h3 id=\"zBIOp\"><a href=\"https://www.luogu.com.cn/problem/P1352\" data-href=\"https://www.luogu.com.cn/problem/P1352\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">P1352 没有上司的舞会</span></a></h3><hr id=\"sQuD0\" class=\"ne-hr\"><ul class=\"ne-ul\"><li id=\"ucecc564f\"><span class=\"ne-text\">利用dp数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示x节点不去的最大价值，dp[1][x]则相反。</span></li><li id=\"u71fe1726\"><span class=\"ne-text\">计算当前节点去的最大值：就是直系子节点不去的最大值。</span></li><li id=\"ud92374ab\"><span class=\"ne-text\">当前节点不去的最大值：就是直系子节点去或者不去的最大值。</span></li><li id=\"uc9ead488\"><span class=\"ne-text\">对树进行深度优先搜索，在回溯的时候统计即可</span></li></ul><p id=\"ue4cb75fc\" class=\"ne-p\"><br></p><p id=\"ub63ed3d5\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/25981481/1681658252326-09f87868-e8bc-491c-80b5-88f829f5b501.png\" width=\"566\" id=\"u20f3663d\" class=\"ne-image\"></p><pre data-language=\"cpp\" id=\"vK4JZ\" class=\"ne-codeblock language-cpp\">#include&lt;iostream&gt;\nusing namespace std;\nconst int N = 6010;\nstruct edge{\n\tint u, ne;\n} e[N];\nint joy[N], h[N],idx = 0, r[N], dp[2][N];\nvoid add(int x, int y){ //使用链式前向星存储\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x){\n\tdp[1][x] = joy[x];\n\tfor(int i = h[x];i;i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tdp[0][x] += dfs(u);\n\t\tdp[1][x] += dp[0][u];\n\t}\n\treturn max(dp[1][x],dp[0][x]);\n}\nint main(){\n\tint n;\n\tcin &gt;&gt; n;\n\tfor(int i= 1;i&lt;=n;i++) cin &gt;&gt; joy[i];\n\tfor(int i = 1;i&lt;= n -1;i++){\n\t\tint x, y;\n\t\tcin &gt;&gt; x &gt;&gt; y;\n\t\tr[x] = 1;\n\t\tadd(y,x);\n\t}\n\tint root = 1;\n\twhile(r[root]) root++;\n\tcout &lt;&lt; dfs(root);\n\treturn 0;\n} </pre><h3 id=\"PEBd5\"><a href=\"https://www.luogu.com.cn/problem/P1395\" data-href=\"https://www.luogu.com.cn/problem/P1395\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">P1395 会议</span></a></h3><hr id=\"YfpNP\" class=\"ne-hr\"><ul class=\"ne-ul\"><li id=\"u5cd03482\"><span class=\"ne-text\">使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量</span></li><li id=\"u8be2f87d\"><span class=\"ne-text\">重心是到达树上各点距离之和最小</span></li><li id=\"uea824314\"><span class=\"ne-text\">找到重心之后，使用 bfs 计算个点之和，使用c[]数组来保存是 bfs 的第几层</span></li></ul><pre data-language=\"cpp\" id=\"w9P19\" class=\"ne-codeblock language-cpp\">#include&lt;iostream&gt;\n#include&lt;queue&gt;\nusing namespace std;\nconst int N = 50010;\nstruct edge{\n\tint u, ne;\n} e[N*2];\nstruct ans{\n\tint u, v;\n} res;\nint h[N], n, idx = 0, v[N], ans, c[N];\nvoid add(int x, int y){\n\te[++idx] = {y,h[x]};\n\th[x] = idx;\n}\nint dfs(int x, int f){\n\tint size = 0;\n\tint sum = 1;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u;\n\t\tif(u == f) continue;\n\t\tint s = dfs(u,x);\n\t\tsize = max(size,s);\n\t\tsum += s;\n\t}\n\tint v = max(size, n - sum);\n\tif(v &lt; res.v || v == res.v &amp;&amp; x &lt; res.u) res= {x,v};\n\treturn sum;\n}\nvoid bfs(int x){\n\tqueue&lt;int&gt; q;\n\tq.push(x);\n\twhile(q.size()){\n\t\tint t = q.front();\n\t\tv[t] = 1;\n\t\tq.pop();\n\t\tfor(int i = h[t];i;i = e[i].ne){\n\t\t\tint u = e[i].u;\n\t\t\tif(!v[u]) {\n\t\t\t\tc[u]=c[t] + 1;\n\t\t\t\tq.push(u);\n\t\t\t\tans+=c[u];\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tcin &gt;&gt; n;\n\tfor(int i = 1;i&lt;= n -1;i++){\n\t\tint x, y;\n\t\tcin &gt;&gt; x &gt;&gt; y;\n\t\tadd(y,x);\n\t\tadd(x,y);\n\t}\n\tres = {N,99999};\n\tdfs(1,0);\n\tbfs(res.u);\n\tcout &lt;&lt; res.u &lt;&lt; &quot; &quot;;\n\tcout &lt;&lt; ans;\n\treturn 0;\n} </pre><h3 id=\"ZIHMB\"><a href=\"https://www.luogu.com.cn/problem/P1273\" data-href=\"https://www.luogu.com.cn/problem/P1273\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">P1273 有线电视网</span></a></h3><hr id=\"muHJK\" class=\"ne-hr\"><pre data-language=\"cpp\" id=\"bXggU\" class=\"ne-codeblock language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 3010;\nstruct edge{\n\tint u, v, ne;\n} e[N*10];\nint h[N], idx = 1, n, m, c[N], dp[N][N];\nvoid add(int x, int y, int z){\n\te[++idx] = {y,z,h[x]};\n\th[x] = idx;\n}\n//普通的树形dp: dp[i][j]为选择 i 为 根的子节点中， 容量为 j 的最大价值 \n//本题的树形dp: dp[i][j]表示 i 为 根的子节点中，选择 j 个叶子节点的最少花费 \n//dp[i][j] 表示节点 i 为根的子树中，选择 j 个叶子节点（用户）所需的最小费用。\n//对于非叶子节点 i（即分线器），我们需要遍历其所有子节点，分配用户数量，并计算总费用。\n//dp 数组可以帮助我们在这个过程中记录和查询子问题的解，从而避免重复计算，提高算法的效率。\nint dfs(int x){\n\tif(x &gt; n - m) {\n\t\tdp[x][1] = c[x];\n\t\treturn 1;\n\t}\n\tint ans = 0, t;\n\tfor(int i = h[x]; i; i = e[i].ne){\n\t\tint u = e[i].u, v = e[i].v;\n\t\tt  = dfs(u);\n\t\tans += t;\n\t\tfor(int j = ans; j &gt;= 1; j--){\n\t\t\tfor(int k = 1; k &lt;= t; k++ ){\n\t\t\t\tif(j&gt;=k) dp[x][j] = max(dp[x][j],dp[x][j-k] + dp[u][k] - e[i].v);\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tcin &gt;&gt; n &gt;&gt; m;\n\tfor(int i = 1; i &lt;= n - m; i++){\n\t\tint j;\n\t\tcin &gt;&gt; j;\n\t\twhile(j--){\n\t\t\tint x, y;\n\t\t\tcin &gt;&gt; x &gt;&gt; y;\n\t\t\tadd(i,x,y);\n\t\t}\n\t}\n    memset(dp,~0x3f,sizeof(dp));//初始化一个极大负值，因为dp可能为负\n\tfor(int i = n - m + 1; i &lt;= n; i++) cin &gt;&gt; c[i];\n    for (int i=1;i&lt;=n;i++) dp[i][0]=0;//选0个用户的花费肯定是0啦\n\tdfs(1);\n\tfor (int i=m;i&gt;=1;i--){\t\n\t\tif(dp[1][i] &gt;= 0) {\n\t\t\tcout &lt;&lt; i;\n\t\t\treturn 0;\n\t\t}\n\t}\n    return 0;\n}</pre></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ube0fd458\" id=\"ube0fd458\"><span data-lake-id=\"u82da8843\" id=\"u82da8843\">tags: [树形dp, 分组背包]</span></p><p data-lake-id=\"ueae95ebe\" id=\"ueae95ebe\"><span data-lake-id=\"u940bdbd2\" id=\"u940bdbd2\">categories: [algorithm]</span></p><p data-lake-id=\"u5649a495\" id=\"u5649a495\"><span data-lake-id=\"ua0e71d38\" id=\"ua0e71d38\">---</span></p><p data-lake-id=\"u25e5b768\" id=\"u25e5b768\"><span data-lake-id=\"u351a7a84\" id=\"u351a7a84\">​</span><br></p><h3 data-lake-id=\"RxQ3i\" id=\"RxQ3i\"><span data-lake-id=\"ub1e332e4\" id=\"ub1e332e4\">树的重心：</span></h3><blockquote data-lake-id=\"ua72e9917\" id=\"ua72e9917\"><p data-lake-id=\"u9ee15660\" id=\"u9ee15660\"><span data-lake-id=\"u5a16e89e\" id=\"u5a16e89e\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 47)\">树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。</span></p></blockquote><p data-lake-id=\"u8978afac\" id=\"u8978afac\"><span data-lake-id=\"u896ad9af\" id=\"u896ad9af\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 47)\">​</span><br></p><p data-lake-id=\"u464041e4\" id=\"u464041e4\"><span data-lake-id=\"u3f28ade9\" id=\"u3f28ade9\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 47)\">求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。</span></p><p data-lake-id=\"uc91e4308\" id=\"uc91e4308\"><span data-lake-id=\"uf0aca623\" id=\"uf0aca623\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 47)\">​</span><br></p><h3 data-lake-id=\"u04n3\" id=\"u04n3\"><span data-lake-id=\"u34ffb010\" id=\"u34ffb010\" style=\"color: rgb(36, 41, 47)\">树的中心：</span></h3><blockquote data-lake-id=\"u6e542a03\" id=\"u6e542a03\"><p data-lake-id=\"u3581fe9f\" id=\"u3581fe9f\"><span data-lake-id=\"u534476fc\" id=\"u534476fc\" class=\"lake-fontsize-11\">一棵树有n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近</span></p></blockquote><p data-lake-id=\"u87cc8fc6\" id=\"u87cc8fc6\"><span data-lake-id=\"u6abc49da\" id=\"u6abc49da\" class=\"lake-fontsize-11\">​</span><br></p><h3 data-lake-id=\"zBIOp\" id=\"zBIOp\"><a href=\"https://www.luogu.com.cn/problem/P1352\" target=\"_blank\" data-lake-id=\"u7fcf8c96\" id=\"u7fcf8c96\"><span data-lake-id=\"u2eca0248\" id=\"u2eca0248\">P1352 没有上司的舞会</span></a></h3><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22sQuD0%22%7D\"></card><ul list=\"ubcd09802\"><li fid=\"ueea5926b\" data-lake-id=\"ucecc564f\" id=\"ucecc564f\"><span data-lake-id=\"u1ef677f9\" id=\"u1ef677f9\">利用dp数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示x节点不去的最大价值，dp[1][x]则相反。</span></li><li fid=\"ueea5926b\" data-lake-id=\"u71fe1726\" id=\"u71fe1726\"><span data-lake-id=\"uffd996cd\" id=\"uffd996cd\">计算当前节点去的最大值：就是直系子节点不去的最大值。</span></li><li fid=\"ueea5926b\" data-lake-id=\"ud92374ab\" id=\"ud92374ab\"><span data-lake-id=\"u759f20e4\" id=\"u759f20e4\">当前节点不去的最大值：就是直系子节点去或者不去的最大值。</span></li><li fid=\"ueea5926b\" data-lake-id=\"uc9ead488\" id=\"uc9ead488\"><span data-lake-id=\"udc1c3fb1\" id=\"udc1c3fb1\">对树进行深度优先搜索，在回溯的时候统计即可</span></li></ul><p data-lake-id=\"ue4cb75fc\" id=\"ue4cb75fc\"><br></p><p data-lake-id=\"ub63ed3d5\" id=\"ub63ed3d5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F25981481%2F1681658252326-09f87868-e8bc-491c-80b5-88f829f5b501.png%22%2C%22taskId%22%3A%22u3104710e-2ddf-4770-90ab-beb045d88eb%22%2C%22clientId%22%3A%22u850e70ac-96e7-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A566%2C%22height%22%3A448%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A23775%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A566%2C%22originHeight%22%3A448%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22ocrLocations%22%3A%5B%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f2f2f2%22%2C%22id%22%3A%22u20f3663d%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22cpp%22%2C%22code%22%3A%22%23include%3Ciostream%3E%5Cnusing%20namespace%20std%3B%5Cnconst%20int%20N%20%3D%206010%3B%5Cnstruct%20edge%7B%5Cn%5Ctint%20u%2C%20ne%3B%5Cn%7D%20e%5BN%5D%3B%5Cnint%20joy%5BN%5D%2C%20h%5BN%5D%2Cidx%20%3D%200%2C%20r%5BN%5D%2C%20dp%5B2%5D%5BN%5D%3B%5Cnvoid%20add(int%20x%2C%20int%20y)%7B%20%2F%2F%E4%BD%BF%E7%94%A8%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%E5%AD%98%E5%82%A8%5Cn%5Cte%5B%2B%2Bidx%5D%20%3D%20%7By%2Ch%5Bx%5D%7D%3B%5Cn%5Cth%5Bx%5D%20%3D%20idx%3B%5Cn%7D%5Cnint%20dfs(int%20x)%7B%5Cn%5Ctdp%5B1%5D%5Bx%5D%20%3D%20joy%5Bx%5D%3B%5Cn%5Ctfor(int%20i%20%3D%20h%5Bx%5D%3Bi%3Bi%20%3D%20e%5Bi%5D.ne)%7B%5Cn%5Ct%5Ctint%20u%20%3D%20e%5Bi%5D.u%3B%5Cn%5Ct%5Ctdp%5B0%5D%5Bx%5D%20%2B%3D%20dfs(u)%3B%5Cn%5Ct%5Ctdp%5B1%5D%5Bx%5D%20%2B%3D%20dp%5B0%5D%5Bu%5D%3B%5Cn%5Ct%7D%5Cn%5Ctreturn%20max(dp%5B1%5D%5Bx%5D%2Cdp%5B0%5D%5Bx%5D)%3B%5Cn%7D%5Cnint%20main()%7B%5Cn%5Ctint%20n%3B%5Cn%5Ctcin%20%3E%3E%20n%3B%5Cn%5Ctfor(int%20i%3D%201%3Bi%3C%3Dn%3Bi%2B%2B)%20cin%20%3E%3E%20joy%5Bi%5D%3B%5Cn%5Ctfor(int%20i%20%3D%201%3Bi%3C%3D%20n%20-1%3Bi%2B%2B)%7B%5Cn%5Ct%5Ctint%20x%2C%20y%3B%5Cn%5Ct%5Ctcin%20%3E%3E%20x%20%3E%3E%20y%3B%5Cn%5Ct%5Ctr%5Bx%5D%20%3D%201%3B%5Cn%5Ct%5Ctadd(y%2Cx)%3B%5Cn%5Ct%7D%5Cn%5Ctint%20root%20%3D%201%3B%5Cn%5Ctwhile(r%5Broot%5D)%20root%2B%2B%3B%5Cn%5Ctcout%20%3C%3C%20dfs(root)%3B%5Cn%5Ctreturn%200%3B%5Cn%7D%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vK4JZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"PEBd5\" id=\"PEBd5\"><a href=\"https://www.luogu.com.cn/problem/P1395\" target=\"_blank\" data-lake-id=\"ud2b76b4d\" id=\"ud2b76b4d\"><span data-lake-id=\"u30bbd825\" id=\"u30bbd825\">P1395 会议</span></a></h3><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22YfpNP%22%7D\"></card><ul list=\"ucc5a62f3\"><li fid=\"u62ce9c0a\" data-lake-id=\"u5cd03482\" id=\"u5cd03482\"><span data-lake-id=\"ue0400160\" id=\"ue0400160\">使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量</span></li><li fid=\"u62ce9c0a\" data-lake-id=\"u8be2f87d\" id=\"u8be2f87d\"><span data-lake-id=\"u51e04d68\" id=\"u51e04d68\">重心是到达树上各点距离之和最小</span></li><li fid=\"u62ce9c0a\" data-lake-id=\"uea824314\" id=\"uea824314\"><span data-lake-id=\"ubeae5af1\" id=\"ubeae5af1\">找到重心之后，使用 bfs 计算个点之和，使用c[]数组来保存是 bfs 的第几层</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22cpp%22%2C%22code%22%3A%22%23include%3Ciostream%3E%5Cn%23include%3Cqueue%3E%5Cnusing%20namespace%20std%3B%5Cnconst%20int%20N%20%3D%2050010%3B%5Cnstruct%20edge%7B%5Cn%5Ctint%20u%2C%20ne%3B%5Cn%7D%20e%5BN*2%5D%3B%5Cnstruct%20ans%7B%5Cn%5Ctint%20u%2C%20v%3B%5Cn%7D%20res%3B%5Cnint%20h%5BN%5D%2C%20n%2C%20idx%20%3D%200%2C%20v%5BN%5D%2C%20ans%2C%20c%5BN%5D%3B%5Cnvoid%20add(int%20x%2C%20int%20y)%7B%5Cn%5Cte%5B%2B%2Bidx%5D%20%3D%20%7By%2Ch%5Bx%5D%7D%3B%5Cn%5Cth%5Bx%5D%20%3D%20idx%3B%5Cn%7D%5Cnint%20dfs(int%20x%2C%20int%20f)%7B%5Cn%5Ctint%20size%20%3D%200%3B%5Cn%5Ctint%20sum%20%3D%201%3B%5Cn%5Ctfor(int%20i%20%3D%20h%5Bx%5D%3B%20i%3B%20i%20%3D%20e%5Bi%5D.ne)%7B%5Cn%5Ct%5Ctint%20u%20%3D%20e%5Bi%5D.u%3B%5Cn%5Ct%5Ctif(u%20%3D%3D%20f)%20continue%3B%5Cn%5Ct%5Ctint%20s%20%3D%20dfs(u%2Cx)%3B%5Cn%5Ct%5Ctsize%20%3D%20max(size%2Cs)%3B%5Cn%5Ct%5Ctsum%20%2B%3D%20s%3B%5Cn%5Ct%7D%5Cn%5Ctint%20v%20%3D%20max(size%2C%20n%20-%20sum)%3B%5Cn%5Ctif(v%20%3C%20res.v%20%7C%7C%20v%20%3D%3D%20res.v%20%26%26%20x%20%3C%20res.u)%20res%3D%20%7Bx%2Cv%7D%3B%5Cn%5Ctreturn%20sum%3B%5Cn%7D%5Cnvoid%20bfs(int%20x)%7B%5Cn%5Ctqueue%3Cint%3E%20q%3B%5Cn%5Ctq.push(x)%3B%5Cn%5Ctwhile(q.size())%7B%5Cn%5Ct%5Ctint%20t%20%3D%20q.front()%3B%5Cn%5Ct%5Ctv%5Bt%5D%20%3D%201%3B%5Cn%5Ct%5Ctq.pop()%3B%5Cn%5Ct%5Ctfor(int%20i%20%3D%20h%5Bt%5D%3Bi%3Bi%20%3D%20e%5Bi%5D.ne)%7B%5Cn%5Ct%5Ct%5Ctint%20u%20%3D%20e%5Bi%5D.u%3B%5Cn%5Ct%5Ct%5Ctif(!v%5Bu%5D)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctc%5Bu%5D%3Dc%5Bt%5D%20%2B%201%3B%5Cn%5Ct%5Ct%5Ct%5Ctq.push(u)%3B%5Cn%5Ct%5Ct%5Ct%5Ctans%2B%3Dc%5Bu%5D%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%7D%5Cnint%20main()%7B%5Cn%5Ctcin%20%3E%3E%20n%3B%5Cn%5Ctfor(int%20i%20%3D%201%3Bi%3C%3D%20n%20-1%3Bi%2B%2B)%7B%5Cn%5Ct%5Ctint%20x%2C%20y%3B%5Cn%5Ct%5Ctcin%20%3E%3E%20x%20%3E%3E%20y%3B%5Cn%5Ct%5Ctadd(y%2Cx)%3B%5Cn%5Ct%5Ctadd(x%2Cy)%3B%5Cn%5Ct%7D%5Cn%5Ctres%20%3D%20%7BN%2C99999%7D%3B%5Cn%5Ctdfs(1%2C0)%3B%5Cn%5Ctbfs(res.u)%3B%5Cn%5Ctcout%20%3C%3C%20res.u%20%3C%3C%20%5C%22%20%5C%22%3B%5Cn%5Ctcout%20%3C%3C%20ans%3B%5Cn%5Ctreturn%200%3B%5Cn%7D%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22w9P19%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ZIHMB\" id=\"ZIHMB\"><a href=\"https://www.luogu.com.cn/problem/P1273\" target=\"_blank\" data-lake-id=\"u2865ff6a\" id=\"u2865ff6a\"><span data-lake-id=\"u17306dd1\" id=\"u17306dd1\">P1273 有线电视网</span></a></h3><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22muHJK%22%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22cpp%22%2C%22code%22%3A%22%23include%3Cbits%2Fstdc%2B%2B.h%3E%5Cnusing%20namespace%20std%3B%5Cnconst%20int%20N%20%3D%203010%3B%5Cnstruct%20edge%7B%5Cn%5Ctint%20u%2C%20v%2C%20ne%3B%5Cn%7D%20e%5BN*10%5D%3B%5Cnint%20h%5BN%5D%2C%20idx%20%3D%201%2C%20n%2C%20m%2C%20c%5BN%5D%2C%20dp%5BN%5D%5BN%5D%3B%5Cnvoid%20add(int%20x%2C%20int%20y%2C%20int%20z)%7B%5Cn%5Cte%5B%2B%2Bidx%5D%20%3D%20%7By%2Cz%2Ch%5Bx%5D%7D%3B%5Cn%5Cth%5Bx%5D%20%3D%20idx%3B%5Cn%7D%5Cn%2F%2F%E6%99%AE%E9%80%9A%E7%9A%84%E6%A0%91%E5%BD%A2dp%3A%20dp%5Bi%5D%5Bj%5D%E4%B8%BA%E9%80%89%E6%8B%A9%20i%20%E4%B8%BA%20%E6%A0%B9%E7%9A%84%E5%AD%90%E8%8A%82%E7%82%B9%E4%B8%AD%EF%BC%8C%20%E5%AE%B9%E9%87%8F%E4%B8%BA%20j%20%E7%9A%84%E6%9C%80%E5%A4%A7%E4%BB%B7%E5%80%BC%20%5Cn%2F%2F%E6%9C%AC%E9%A2%98%E7%9A%84%E6%A0%91%E5%BD%A2dp%3A%20dp%5Bi%5D%5Bj%5D%E8%A1%A8%E7%A4%BA%20i%20%E4%B8%BA%20%E6%A0%B9%E7%9A%84%E5%AD%90%E8%8A%82%E7%82%B9%E4%B8%AD%EF%BC%8C%E9%80%89%E6%8B%A9%20j%20%E4%B8%AA%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%91%E8%8A%B1%E8%B4%B9%20%5Cn%2F%2Fdp%5Bi%5D%5Bj%5D%20%E8%A1%A8%E7%A4%BA%E8%8A%82%E7%82%B9%20i%20%E4%B8%BA%E6%A0%B9%E7%9A%84%E5%AD%90%E6%A0%91%E4%B8%AD%EF%BC%8C%E9%80%89%E6%8B%A9%20j%20%E4%B8%AA%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%EF%BC%88%E7%94%A8%E6%88%B7%EF%BC%89%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E3%80%82%5Cn%2F%2F%E5%AF%B9%E4%BA%8E%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%20i%EF%BC%88%E5%8D%B3%E5%88%86%E7%BA%BF%E5%99%A8%EF%BC%89%EF%BC%8C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E9%81%8D%E5%8E%86%E5%85%B6%E6%89%80%E6%9C%89%E5%AD%90%E8%8A%82%E7%82%B9%EF%BC%8C%E5%88%86%E9%85%8D%E7%94%A8%E6%88%B7%E6%95%B0%E9%87%8F%EF%BC%8C%E5%B9%B6%E8%AE%A1%E7%AE%97%E6%80%BB%E8%B4%B9%E7%94%A8%E3%80%82%5Cn%2F%2Fdp%20%E6%95%B0%E7%BB%84%E5%8F%AF%E4%BB%A5%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%AE%B0%E5%BD%95%E5%92%8C%E6%9F%A5%E8%AF%A2%E5%AD%90%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%EF%BC%8C%E4%BB%8E%E8%80%8C%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%AE%A1%E7%AE%97%EF%BC%8C%E6%8F%90%E9%AB%98%E7%AE%97%E6%B3%95%E7%9A%84%E6%95%88%E7%8E%87%E3%80%82%5Cnint%20dfs(int%20x)%7B%5Cn%5Ctif(x%20%3E%20n%20-%20m)%20%7B%5Cn%5Ct%5Ctdp%5Bx%5D%5B1%5D%20%3D%20c%5Bx%5D%3B%5Cn%5Ct%5Ctreturn%201%3B%5Cn%5Ct%7D%5Cn%5Ctint%20ans%20%3D%200%2C%20t%3B%5Cn%5Ctfor(int%20i%20%3D%20h%5Bx%5D%3B%20i%3B%20i%20%3D%20e%5Bi%5D.ne)%7B%5Cn%5Ct%5Ctint%20u%20%3D%20e%5Bi%5D.u%2C%20v%20%3D%20e%5Bi%5D.v%3B%5Cn%5Ct%5Ctt%20%20%3D%20dfs(u)%3B%5Cn%5Ct%5Ctans%20%2B%3D%20t%3B%5Cn%5Ct%5Ctfor(int%20j%20%3D%20ans%3B%20j%20%3E%3D%201%3B%20j--)%7B%5Cn%5Ct%5Ct%5Ctfor(int%20k%20%3D%201%3B%20k%20%3C%3D%20t%3B%20k%2B%2B%20)%7B%5Cn%5Ct%5Ct%5Ct%5Ctif(j%3E%3Dk)%20dp%5Bx%5D%5Bj%5D%20%3D%20max(dp%5Bx%5D%5Bj%5D%2Cdp%5Bx%5D%5Bj-k%5D%20%2B%20dp%5Bu%5D%5Bk%5D%20-%20e%5Bi%5D.v)%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Ctreturn%20ans%3B%5Cn%7D%5Cnint%20main()%7B%5Cn%5Ctcin%20%3E%3E%20n%20%3E%3E%20m%3B%5Cn%5Ctfor(int%20i%20%3D%201%3B%20i%20%3C%3D%20n%20-%20m%3B%20i%2B%2B)%7B%5Cn%5Ct%5Ctint%20j%3B%5Cn%5Ct%5Ctcin%20%3E%3E%20j%3B%5Cn%5Ct%5Ctwhile(j--)%7B%5Cn%5Ct%5Ct%5Ctint%20x%2C%20y%3B%5Cn%5Ct%5Ct%5Ctcin%20%3E%3E%20x%20%3E%3E%20y%3B%5Cn%5Ct%5Ct%5Ctadd(i%2Cx%2Cy)%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%20%20%20%20memset(dp%2C~0x3f%2Csizeof(dp))%3B%2F%2F%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%E6%9E%81%E5%A4%A7%E8%B4%9F%E5%80%BC%EF%BC%8C%E5%9B%A0%E4%B8%BAdp%E5%8F%AF%E8%83%BD%E4%B8%BA%E8%B4%9F%5Cn%5Ctfor(int%20i%20%3D%20n%20-%20m%20%2B%201%3B%20i%20%3C%3D%20n%3B%20i%2B%2B)%20cin%20%3E%3E%20c%5Bi%5D%3B%5Cn%20%20%20%20for%20(int%20i%3D1%3Bi%3C%3Dn%3Bi%2B%2B)%20dp%5Bi%5D%5B0%5D%3D0%3B%2F%2F%E9%80%890%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E8%8A%B1%E8%B4%B9%E8%82%AF%E5%AE%9A%E6%98%AF0%E5%95%A6%5Cn%5Ctdfs(1)%3B%5Cn%5Ctfor%20(int%20i%3Dm%3Bi%3E%3D1%3Bi--)%7B%5Ct%5Cn%5Ct%5Ctif(dp%5B1%5D%5Bi%5D%20%3E%3D%200)%20%7B%5Cn%5Ct%5Ct%5Ctcout%20%3C%3C%20i%3B%5Cn%5Ct%5Ct%5Ctreturn%200%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%20%20%20%20return%200%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bXggU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ube0fd458\" id=\"ube0fd458\"><span data-lake-id=\"u82da8843\" id=\"u82da8843\">tags: [树形dp, 分组背包]</span></p><p data-lake-id=\"ueae95ebe\" id=\"ueae95ebe\"><span data-lake-id=\"u940bdbd2\" id=\"u940bdbd2\">categories: [algorithm]</span></p><p data-lake-id=\"u5649a495\" id=\"u5649a495\"><span data-lake-id=\"ua0e71d38\" id=\"ua0e71d38\">---</span></p><p data-lake-id=\"u25e5b768\" id=\"u25e5b768\"><span data-lake-id=\"u351a7a84\" id=\"u351a7a84\">​</span><br></p><h3 data-lake-id=\"RxQ3i\" id=\"RxQ3i\"><span data-lake-id=\"ub1e332e4\" id=\"ub1e332e4\">树的重心：</span></h3><blockquote data-lake-id=\"ua72e9917\" id=\"ua72e9917\"><p data-lake-id=\"u9ee15660\" id=\"u9ee15660\"><span data-lake-id=\"u5a16e89e\" id=\"u5a16e89e\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 47)\">树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。</span></p></blockquote><p data-lake-id=\"u8978afac\" id=\"u8978afac\"><span data-lake-id=\"u896ad9af\" id=\"u896ad9af\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 47)\">​</span><br></p><p data-lake-id=\"u464041e4\" id=\"u464041e4\"><span data-lake-id=\"u3f28ade9\" id=\"u3f28ade9\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 47)\">求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点在树的直径上。</span></p><p data-lake-id=\"uc91e4308\" id=\"uc91e4308\"><span data-lake-id=\"uf0aca623\" id=\"uf0aca623\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 47)\">​</span><br></p><h3 data-lake-id=\"u04n3\" id=\"u04n3\"><span data-lake-id=\"u34ffb010\" id=\"u34ffb010\" style=\"color: rgb(36, 41, 47)\">树的中心：</span></h3><blockquote data-lake-id=\"u6e542a03\" id=\"u6e542a03\"><p data-lake-id=\"u3581fe9f\" id=\"u3581fe9f\"><span data-lake-id=\"u534476fc\" id=\"u534476fc\" class=\"lake-fontsize-11\">一棵树有n - 1 条无向边，每条边都有一个权值，在树上找到一点，使得该点到树上其他点的最远距离最近</span></p></blockquote><p data-lake-id=\"u87cc8fc6\" id=\"u87cc8fc6\"><span data-lake-id=\"u6abc49da\" id=\"u6abc49da\" class=\"lake-fontsize-11\">​</span><br></p><h3 data-lake-id=\"zBIOp\" id=\"zBIOp\"><a href=\"https://www.luogu.com.cn/problem/P1352\" target=\"_blank\" data-lake-id=\"u7fcf8c96\" id=\"u7fcf8c96\"><span data-lake-id=\"u2eca0248\" id=\"u2eca0248\">P1352 没有上司的舞会</span></a></h3><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22sQuD0%22%7D\"></card><ul list=\"ubcd09802\"><li fid=\"ueea5926b\" data-lake-id=\"ucecc564f\" id=\"ucecc564f\"><span data-lake-id=\"u1ef677f9\" id=\"u1ef677f9\">利用dp数组，判断每一个根节点去还是不去的快乐指数，dp[0][x]表示x节点不去的最大价值，dp[1][x]则相反。</span></li><li fid=\"ueea5926b\" data-lake-id=\"u71fe1726\" id=\"u71fe1726\"><span data-lake-id=\"uffd996cd\" id=\"uffd996cd\">计算当前节点去的最大值：就是直系子节点不去的最大值。</span></li><li fid=\"ueea5926b\" data-lake-id=\"ud92374ab\" id=\"ud92374ab\"><span data-lake-id=\"u759f20e4\" id=\"u759f20e4\">当前节点不去的最大值：就是直系子节点去或者不去的最大值。</span></li><li fid=\"ueea5926b\" data-lake-id=\"uc9ead488\" id=\"uc9ead488\"><span data-lake-id=\"udc1c3fb1\" id=\"udc1c3fb1\">对树进行深度优先搜索，在回溯的时候统计即可</span></li></ul><p data-lake-id=\"ue4cb75fc\" id=\"ue4cb75fc\"><br></p><p data-lake-id=\"ub63ed3d5\" id=\"ub63ed3d5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F25981481%2F1681658252326-09f87868-e8bc-491c-80b5-88f829f5b501.png%22%2C%22taskId%22%3A%22u3104710e-2ddf-4770-90ab-beb045d88eb%22%2C%22clientId%22%3A%22u850e70ac-96e7-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A566%2C%22height%22%3A448%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A23775%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A566%2C%22originHeight%22%3A448%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22ocrLocations%22%3A%5B%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f2f2f2%22%2C%22id%22%3A%22u20f3663d%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22cpp%22%2C%22code%22%3A%22%23include%3Ciostream%3E%5Cnusing%20namespace%20std%3B%5Cnconst%20int%20N%20%3D%206010%3B%5Cnstruct%20edge%7B%5Cn%5Ctint%20u%2C%20ne%3B%5Cn%7D%20e%5BN%5D%3B%5Cnint%20joy%5BN%5D%2C%20h%5BN%5D%2Cidx%20%3D%200%2C%20r%5BN%5D%2C%20dp%5B2%5D%5BN%5D%3B%5Cnvoid%20add(int%20x%2C%20int%20y)%7B%20%2F%2F%E4%BD%BF%E7%94%A8%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%E5%AD%98%E5%82%A8%5Cn%5Cte%5B%2B%2Bidx%5D%20%3D%20%7By%2Ch%5Bx%5D%7D%3B%5Cn%5Cth%5Bx%5D%20%3D%20idx%3B%5Cn%7D%5Cnint%20dfs(int%20x)%7B%5Cn%5Ctdp%5B1%5D%5Bx%5D%20%3D%20joy%5Bx%5D%3B%5Cn%5Ctfor(int%20i%20%3D%20h%5Bx%5D%3Bi%3Bi%20%3D%20e%5Bi%5D.ne)%7B%5Cn%5Ct%5Ctint%20u%20%3D%20e%5Bi%5D.u%3B%5Cn%5Ct%5Ctdp%5B0%5D%5Bx%5D%20%2B%3D%20dfs(u)%3B%5Cn%5Ct%5Ctdp%5B1%5D%5Bx%5D%20%2B%3D%20dp%5B0%5D%5Bu%5D%3B%5Cn%5Ct%7D%5Cn%5Ctreturn%20max(dp%5B1%5D%5Bx%5D%2Cdp%5B0%5D%5Bx%5D)%3B%5Cn%7D%5Cnint%20main()%7B%5Cn%5Ctint%20n%3B%5Cn%5Ctcin%20%3E%3E%20n%3B%5Cn%5Ctfor(int%20i%3D%201%3Bi%3C%3Dn%3Bi%2B%2B)%20cin%20%3E%3E%20joy%5Bi%5D%3B%5Cn%5Ctfor(int%20i%20%3D%201%3Bi%3C%3D%20n%20-1%3Bi%2B%2B)%7B%5Cn%5Ct%5Ctint%20x%2C%20y%3B%5Cn%5Ct%5Ctcin%20%3E%3E%20x%20%3E%3E%20y%3B%5Cn%5Ct%5Ctr%5Bx%5D%20%3D%201%3B%5Cn%5Ct%5Ctadd(y%2Cx)%3B%5Cn%5Ct%7D%5Cn%5Ctint%20root%20%3D%201%3B%5Cn%5Ctwhile(r%5Broot%5D)%20root%2B%2B%3B%5Cn%5Ctcout%20%3C%3C%20dfs(root)%3B%5Cn%5Ctreturn%200%3B%5Cn%7D%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vK4JZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"PEBd5\" id=\"PEBd5\"><a href=\"https://www.luogu.com.cn/problem/P1395\" target=\"_blank\" data-lake-id=\"ud2b76b4d\" id=\"ud2b76b4d\"><span data-lake-id=\"u30bbd825\" id=\"u30bbd825\">P1395 会议</span></a></h3><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22YfpNP%22%7D\"></card><ul list=\"ucc5a62f3\"><li fid=\"u62ce9c0a\" data-lake-id=\"u5cd03482\" id=\"u5cd03482\"><span data-lake-id=\"ue0400160\" id=\"ue0400160\">使用 dfs 找到树的重心，其中 dfs 返回的是最大的子树的连通量</span></li><li fid=\"u62ce9c0a\" data-lake-id=\"u8be2f87d\" id=\"u8be2f87d\"><span data-lake-id=\"u51e04d68\" id=\"u51e04d68\">重心是到达树上各点距离之和最小</span></li><li fid=\"u62ce9c0a\" data-lake-id=\"uea824314\" id=\"uea824314\"><span data-lake-id=\"ubeae5af1\" id=\"ubeae5af1\">找到重心之后，使用 bfs 计算个点之和，使用c[]数组来保存是 bfs 的第几层</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22cpp%22%2C%22code%22%3A%22%23include%3Ciostream%3E%5Cn%23include%3Cqueue%3E%5Cnusing%20namespace%20std%3B%5Cnconst%20int%20N%20%3D%2050010%3B%5Cnstruct%20edge%7B%5Cn%5Ctint%20u%2C%20ne%3B%5Cn%7D%20e%5BN*2%5D%3B%5Cnstruct%20ans%7B%5Cn%5Ctint%20u%2C%20v%3B%5Cn%7D%20res%3B%5Cnint%20h%5BN%5D%2C%20n%2C%20idx%20%3D%200%2C%20v%5BN%5D%2C%20ans%2C%20c%5BN%5D%3B%5Cnvoid%20add(int%20x%2C%20int%20y)%7B%5Cn%5Cte%5B%2B%2Bidx%5D%20%3D%20%7By%2Ch%5Bx%5D%7D%3B%5Cn%5Cth%5Bx%5D%20%3D%20idx%3B%5Cn%7D%5Cnint%20dfs(int%20x%2C%20int%20f)%7B%5Cn%5Ctint%20size%20%3D%200%3B%5Cn%5Ctint%20sum%20%3D%201%3B%5Cn%5Ctfor(int%20i%20%3D%20h%5Bx%5D%3B%20i%3B%20i%20%3D%20e%5Bi%5D.ne)%7B%5Cn%5Ct%5Ctint%20u%20%3D%20e%5Bi%5D.u%3B%5Cn%5Ct%5Ctif(u%20%3D%3D%20f)%20continue%3B%5Cn%5Ct%5Ctint%20s%20%3D%20dfs(u%2Cx)%3B%5Cn%5Ct%5Ctsize%20%3D%20max(size%2Cs)%3B%5Cn%5Ct%5Ctsum%20%2B%3D%20s%3B%5Cn%5Ct%7D%5Cn%5Ctint%20v%20%3D%20max(size%2C%20n%20-%20sum)%3B%5Cn%5Ctif(v%20%3C%20res.v%20%7C%7C%20v%20%3D%3D%20res.v%20%26%26%20x%20%3C%20res.u)%20res%3D%20%7Bx%2Cv%7D%3B%5Cn%5Ctreturn%20sum%3B%5Cn%7D%5Cnvoid%20bfs(int%20x)%7B%5Cn%5Ctqueue%3Cint%3E%20q%3B%5Cn%5Ctq.push(x)%3B%5Cn%5Ctwhile(q.size())%7B%5Cn%5Ct%5Ctint%20t%20%3D%20q.front()%3B%5Cn%5Ct%5Ctv%5Bt%5D%20%3D%201%3B%5Cn%5Ct%5Ctq.pop()%3B%5Cn%5Ct%5Ctfor(int%20i%20%3D%20h%5Bt%5D%3Bi%3Bi%20%3D%20e%5Bi%5D.ne)%7B%5Cn%5Ct%5Ct%5Ctint%20u%20%3D%20e%5Bi%5D.u%3B%5Cn%5Ct%5Ct%5Ctif(!v%5Bu%5D)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctc%5Bu%5D%3Dc%5Bt%5D%20%2B%201%3B%5Cn%5Ct%5Ct%5Ct%5Ctq.push(u)%3B%5Cn%5Ct%5Ct%5Ct%5Ctans%2B%3Dc%5Bu%5D%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%7D%5Cnint%20main()%7B%5Cn%5Ctcin%20%3E%3E%20n%3B%5Cn%5Ctfor(int%20i%20%3D%201%3Bi%3C%3D%20n%20-1%3Bi%2B%2B)%7B%5Cn%5Ct%5Ctint%20x%2C%20y%3B%5Cn%5Ct%5Ctcin%20%3E%3E%20x%20%3E%3E%20y%3B%5Cn%5Ct%5Ctadd(y%2Cx)%3B%5Cn%5Ct%5Ctadd(x%2Cy)%3B%5Cn%5Ct%7D%5Cn%5Ctres%20%3D%20%7BN%2C99999%7D%3B%5Cn%5Ctdfs(1%2C0)%3B%5Cn%5Ctbfs(res.u)%3B%5Cn%5Ctcout%20%3C%3C%20res.u%20%3C%3C%20%5C%22%20%5C%22%3B%5Cn%5Ctcout%20%3C%3C%20ans%3B%5Cn%5Ctreturn%200%3B%5Cn%7D%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22w9P19%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ZIHMB\" id=\"ZIHMB\"><a href=\"https://www.luogu.com.cn/problem/P1273\" target=\"_blank\" data-lake-id=\"u2865ff6a\" id=\"u2865ff6a\"><span data-lake-id=\"u17306dd1\" id=\"u17306dd1\">P1273 有线电视网</span></a></h3><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22muHJK%22%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22cpp%22%2C%22code%22%3A%22%23include%3Cbits%2Fstdc%2B%2B.h%3E%5Cnusing%20namespace%20std%3B%5Cnconst%20int%20N%20%3D%203010%3B%5Cnstruct%20edge%7B%5Cn%5Ctint%20u%2C%20v%2C%20ne%3B%5Cn%7D%20e%5BN*10%5D%3B%5Cnint%20h%5BN%5D%2C%20idx%20%3D%201%2C%20n%2C%20m%2C%20c%5BN%5D%2C%20dp%5BN%5D%5BN%5D%3B%5Cnvoid%20add(int%20x%2C%20int%20y%2C%20int%20z)%7B%5Cn%5Cte%5B%2B%2Bidx%5D%20%3D%20%7By%2Cz%2Ch%5Bx%5D%7D%3B%5Cn%5Cth%5Bx%5D%20%3D%20idx%3B%5Cn%7D%5Cn%2F%2F%E6%99%AE%E9%80%9A%E7%9A%84%E6%A0%91%E5%BD%A2dp%3A%20dp%5Bi%5D%5Bj%5D%E4%B8%BA%E9%80%89%E6%8B%A9%20i%20%E4%B8%BA%20%E6%A0%B9%E7%9A%84%E5%AD%90%E8%8A%82%E7%82%B9%E4%B8%AD%EF%BC%8C%20%E5%AE%B9%E9%87%8F%E4%B8%BA%20j%20%E7%9A%84%E6%9C%80%E5%A4%A7%E4%BB%B7%E5%80%BC%20%5Cn%2F%2F%E6%9C%AC%E9%A2%98%E7%9A%84%E6%A0%91%E5%BD%A2dp%3A%20dp%5Bi%5D%5Bj%5D%E8%A1%A8%E7%A4%BA%20i%20%E4%B8%BA%20%E6%A0%B9%E7%9A%84%E5%AD%90%E8%8A%82%E7%82%B9%E4%B8%AD%EF%BC%8C%E9%80%89%E6%8B%A9%20j%20%E4%B8%AA%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%91%E8%8A%B1%E8%B4%B9%20%5Cn%2F%2Fdp%5Bi%5D%5Bj%5D%20%E8%A1%A8%E7%A4%BA%E8%8A%82%E7%82%B9%20i%20%E4%B8%BA%E6%A0%B9%E7%9A%84%E5%AD%90%E6%A0%91%E4%B8%AD%EF%BC%8C%E9%80%89%E6%8B%A9%20j%20%E4%B8%AA%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%EF%BC%88%E7%94%A8%E6%88%B7%EF%BC%89%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E3%80%82%5Cn%2F%2F%E5%AF%B9%E4%BA%8E%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%20i%EF%BC%88%E5%8D%B3%E5%88%86%E7%BA%BF%E5%99%A8%EF%BC%89%EF%BC%8C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E9%81%8D%E5%8E%86%E5%85%B6%E6%89%80%E6%9C%89%E5%AD%90%E8%8A%82%E7%82%B9%EF%BC%8C%E5%88%86%E9%85%8D%E7%94%A8%E6%88%B7%E6%95%B0%E9%87%8F%EF%BC%8C%E5%B9%B6%E8%AE%A1%E7%AE%97%E6%80%BB%E8%B4%B9%E7%94%A8%E3%80%82%5Cn%2F%2Fdp%20%E6%95%B0%E7%BB%84%E5%8F%AF%E4%BB%A5%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%AE%B0%E5%BD%95%E5%92%8C%E6%9F%A5%E8%AF%A2%E5%AD%90%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%EF%BC%8C%E4%BB%8E%E8%80%8C%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%AE%A1%E7%AE%97%EF%BC%8C%E6%8F%90%E9%AB%98%E7%AE%97%E6%B3%95%E7%9A%84%E6%95%88%E7%8E%87%E3%80%82%5Cnint%20dfs(int%20x)%7B%5Cn%5Ctif(x%20%3E%20n%20-%20m)%20%7B%5Cn%5Ct%5Ctdp%5Bx%5D%5B1%5D%20%3D%20c%5Bx%5D%3B%5Cn%5Ct%5Ctreturn%201%3B%5Cn%5Ct%7D%5Cn%5Ctint%20ans%20%3D%200%2C%20t%3B%5Cn%5Ctfor(int%20i%20%3D%20h%5Bx%5D%3B%20i%3B%20i%20%3D%20e%5Bi%5D.ne)%7B%5Cn%5Ct%5Ctint%20u%20%3D%20e%5Bi%5D.u%2C%20v%20%3D%20e%5Bi%5D.v%3B%5Cn%5Ct%5Ctt%20%20%3D%20dfs(u)%3B%5Cn%5Ct%5Ctans%20%2B%3D%20t%3B%5Cn%5Ct%5Ctfor(int%20j%20%3D%20ans%3B%20j%20%3E%3D%201%3B%20j--)%7B%5Cn%5Ct%5Ct%5Ctfor(int%20k%20%3D%201%3B%20k%20%3C%3D%20t%3B%20k%2B%2B%20)%7B%5Cn%5Ct%5Ct%5Ct%5Ctif(j%3E%3Dk)%20dp%5Bx%5D%5Bj%5D%20%3D%20max(dp%5Bx%5D%5Bj%5D%2Cdp%5Bx%5D%5Bj-k%5D%20%2B%20dp%5Bu%5D%5Bk%5D%20-%20e%5Bi%5D.v)%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Ctreturn%20ans%3B%5Cn%7D%5Cnint%20main()%7B%5Cn%5Ctcin%20%3E%3E%20n%20%3E%3E%20m%3B%5Cn%5Ctfor(int%20i%20%3D%201%3B%20i%20%3C%3D%20n%20-%20m%3B%20i%2B%2B)%7B%5Cn%5Ct%5Ctint%20j%3B%5Cn%5Ct%5Ctcin%20%3E%3E%20j%3B%5Cn%5Ct%5Ctwhile(j--)%7B%5Cn%5Ct%5Ct%5Ctint%20x%2C%20y%3B%5Cn%5Ct%5Ct%5Ctcin%20%3E%3E%20x%20%3E%3E%20y%3B%5Cn%5Ct%5Ct%5Ctadd(i%2Cx%2Cy)%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%20%20%20%20memset(dp%2C~0x3f%2Csizeof(dp))%3B%2F%2F%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%E6%9E%81%E5%A4%A7%E8%B4%9F%E5%80%BC%EF%BC%8C%E5%9B%A0%E4%B8%BAdp%E5%8F%AF%E8%83%BD%E4%B8%BA%E8%B4%9F%5Cn%5Ctfor(int%20i%20%3D%20n%20-%20m%20%2B%201%3B%20i%20%3C%3D%20n%3B%20i%2B%2B)%20cin%20%3E%3E%20c%5Bi%5D%3B%5Cn%20%20%20%20for%20(int%20i%3D1%3Bi%3C%3Dn%3Bi%2B%2B)%20dp%5Bi%5D%5B0%5D%3D0%3B%2F%2F%E9%80%890%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E8%8A%B1%E8%B4%B9%E8%82%AF%E5%AE%9A%E6%98%AF0%E5%95%A6%5Cn%5Ctdfs(1)%3B%5Cn%5Ctfor%20(int%20i%3Dm%3Bi%3E%3D1%3Bi--)%7B%5Ct%5Cn%5Ct%5Ctif(dp%5B1%5D%5Bi%5D%20%3E%3D%200)%20%7B%5Cn%5Ct%5Ct%5Ctcout%20%3C%3C%20i%3B%5Cn%5Ct%5Ct%5Ctreturn%200%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%20%20%20%20return%200%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bXggU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-04-17T11:25:13.000Z",
    "deleted_at": null,
    "created_at": "2023-04-16T14:40:48.000Z",
    "updated_at": "2023-04-17T11:25:13.000Z",
    "published_at": "2023-04-17T11:25:13.000Z",
    "first_published_at": "2023-04-16T14:40:51.217Z",
    "word_count": 1078,
    "cover": "https://cdn.nlark.com/yuque/0/2023/png/25981481/1681658252326-09f87868-e8bc-491c-80b5-88f829f5b501.png",
    "description": "tags: [树形dp, 分组背包]categories: [algorithm]---树的重心：树的重心是指一棵树中的一个节点，如果将这个节点删除后，剩余各个连通块中节点数的最大值最小，那么这个节点就是这棵树的重心。求一棵树的重心可以使用树的重心定理，即一棵树的重心最多只有两个，且这两个节点...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 121122321,
    "slug": "xrg4z8gpd714zrvr",
    "title": "我的介绍",
    "book_id": 37139568,
    "book": {
      "id": 37139568,
      "type": "Book",
      "slug": "puv4o1",
      "name": "随笔",
      "user_id": 25981481,
      "description": "我的个人随笔",
      "creator_id": 25981481,
      "public": 1,
      "items_count": 2,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-04-17T11:23:23.609Z",
      "updated_at": "2023-04-17T11:23:24.000Z",
      "created_at": "2023-04-09T08:13:42.000Z",
      "namespace": "xii-panda/puv4o1",
      "user": {
        "id": 25981481,
        "type": "User",
        "login": "xii-panda",
        "name": "我的语雀",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/25981481/1642922091375-avatar/ac777239-4437-4aad-b1b4-2e8c1e8dde6d.png",
        "books_count": 5,
        "public_books_count": 4,
        "followers_count": 0,
        "following_count": 1,
        "created_at": "2022-01-23T07:13:12.000Z",
        "updated_at": "2023-04-17T10:43:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 25981481,
    "creator": {
      "id": 25981481,
      "type": "User",
      "login": "xii-panda",
      "name": "我的语雀",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/25981481/1642922091375-avatar/ac777239-4437-4aad-b1b4-2e8c1e8dde6d.png",
      "books_count": 5,
      "public_books_count": 4,
      "followers_count": 0,
      "following_count": 1,
      "created_at": "2022-01-23T07:13:12.000Z",
      "updated_at": "2023-04-17T10:43:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [profile, hobby]<br />categories: [daily]<br />---\n\n我的博客<br />记录学习的内容进行知识分享，@yier<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/25981481/1681729432554-ae772ddd-ccac-4452-b5c9-6f460f564335.png#averageHue=%23ad8556&clientId=u2605f283-3e5b-4&from=paste&height=659&id=ufb611d45&name=image.png&originHeight=659&originWidth=371&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29424&status=done&style=none&taskId=u5688285a-72c0-4427-afbe-135b1697b90&title=&width=371)\n",
    "body_draft": "tags: [profile, hobby]<br />categories: [daily]<br />---\n\n我的博客<br />记录学习的内容进行知识分享，@yier<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/25981481/1681729432554-ae772ddd-ccac-4452-b5c9-6f460f564335.png#averageHue=%23ad8556&clientId=u2605f283-3e5b-4&from=paste&height=659&id=ufb611d45&name=image.png&originHeight=659&originWidth=371&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29424&status=done&style=none&taskId=u5688285a-72c0-4427-afbe-135b1697b90&title=&width=371)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uce75756e\" class=\"ne-p\"><span class=\"ne-text\">tags: [profile, hobby]</span></p><p id=\"u8e5883b6\" class=\"ne-p\"><span class=\"ne-text\">categories: [daily]</span></p><p id=\"u9ba4a176\" class=\"ne-p\"><span class=\"ne-text\">---</span></p><p id=\"ua7b91c92\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uff4b7a5a\" class=\"ne-p\"><span class=\"ne-text\">我的博客</span></p><p id=\"u9c180fd1\" class=\"ne-p\"><span class=\"ne-text\">记录学习的内容进行知识分享，@yier</span></p><p id=\"u3ce50998\" class=\"ne-p\" style=\"text-align: center\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/25981481/1681729432554-ae772ddd-ccac-4452-b5c9-6f460f564335.png\" width=\"371\" id=\"ufb611d45\" class=\"ne-image\"></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uce75756e\" id=\"uce75756e\"><span data-lake-id=\"ud6da23f7\" id=\"ud6da23f7\">tags: [profile, hobby]</span></p><p data-lake-id=\"u8e5883b6\" id=\"u8e5883b6\"><span data-lake-id=\"u47718bb2\" id=\"u47718bb2\">categories: [daily]</span></p><p data-lake-id=\"u9ba4a176\" id=\"u9ba4a176\"><span data-lake-id=\"u36d316e0\" id=\"u36d316e0\">---</span></p><p data-lake-id=\"ua7b91c92\" id=\"ua7b91c92\"><span data-lake-id=\"ued05e784\" id=\"ued05e784\">​</span><br></p><p data-lake-id=\"uff4b7a5a\" id=\"uff4b7a5a\"><span data-lake-id=\"ucd7a3869\" id=\"ucd7a3869\">我的博客</span></p><p data-lake-id=\"u9c180fd1\" id=\"u9c180fd1\"><span data-lake-id=\"u983bc85b\" id=\"u983bc85b\">记录学习的内容进行知识分享，@yier</span></p><p data-lake-id=\"u3ce50998\" id=\"u3ce50998\" style=\"text-align: center\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F25981481%2F1681729432554-ae772ddd-ccac-4452-b5c9-6f460f564335.png%22%2C%22taskId%22%3A%22u5688285a-72c0-4427-afbe-135b1697b90%22%2C%22clientId%22%3A%22u2605f283-3e5b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A371%2C%22height%22%3A659%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A29424%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A371%2C%22originHeight%22%3A659%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22ocrLocations%22%3A%5B%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ad8556%22%2C%22id%22%3A%22ufb611d45%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uce75756e\" id=\"uce75756e\"><span data-lake-id=\"ud6da23f7\" id=\"ud6da23f7\">tags: [profile, hobby]</span></p><p data-lake-id=\"u8e5883b6\" id=\"u8e5883b6\"><span data-lake-id=\"u47718bb2\" id=\"u47718bb2\">categories: [daily]</span></p><p data-lake-id=\"u9ba4a176\" id=\"u9ba4a176\"><span data-lake-id=\"u36d316e0\" id=\"u36d316e0\">---</span></p><p data-lake-id=\"ua7b91c92\" id=\"ua7b91c92\"><span data-lake-id=\"ued05e784\" id=\"ued05e784\">​</span><br></p><p data-lake-id=\"uff4b7a5a\" id=\"uff4b7a5a\"><span data-lake-id=\"ucd7a3869\" id=\"ucd7a3869\">我的博客</span></p><p data-lake-id=\"u9c180fd1\" id=\"u9c180fd1\"><span data-lake-id=\"u983bc85b\" id=\"u983bc85b\">记录学习的内容进行知识分享，@yier</span></p><p data-lake-id=\"u3ce50998\" id=\"u3ce50998\" style=\"text-align: center\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F25981481%2F1681729432554-ae772ddd-ccac-4452-b5c9-6f460f564335.png%22%2C%22taskId%22%3A%22u5688285a-72c0-4427-afbe-135b1697b90%22%2C%22clientId%22%3A%22u2605f283-3e5b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A371%2C%22height%22%3A659%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A29424%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A371%2C%22originHeight%22%3A659%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22ocrLocations%22%3A%5B%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ad8556%22%2C%22id%22%3A%22ufb611d45%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-04-17T11:23:24.000Z",
    "deleted_at": null,
    "created_at": "2023-04-09T08:37:53.000Z",
    "updated_at": "2023-04-17T11:23:24.000Z",
    "published_at": "2023-04-17T11:23:24.000Z",
    "first_published_at": "2023-04-09T08:38:01.091Z",
    "word_count": 25,
    "cover": "https://cdn.nlark.com/yuque/0/2023/png/25981481/1681729432554-ae772ddd-ccac-4452-b5c9-6f460f564335.png",
    "description": "tags: [profile, hobby]categories: [daily]---我的博客记录学习的内容进行知识分享，@yier",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]